<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1174" onload="init(evt)" viewBox="0 0 1200 1174" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1174" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1157.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1157.00"> </text><svg id="frames" x="10" width="1180" total_samples="296"><g><title>get_next_timeout (1 samples, 0.34%)</title><rect x="0.0000%" y="1013" width="0.3378%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1023.50"></text></g><g><title>libusb_get_next_timeout (1 samples, 0.34%)</title><rect x="0.0000%" y="997" width="0.3378%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1007.50"></text></g><g><title>usbi_mutex_lock (1 samples, 0.34%)</title><rect x="0.0000%" y="981" width="0.3378%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="991.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.34%)</title><rect x="0.0000%" y="965" width="0.3378%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="975.50"></text></g><g><title>__GI___lll_lock_wait (1 samples, 0.34%)</title><rect x="0.0000%" y="949" width="0.3378%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="959.50"></text></g><g><title>__GI___poll (8 samples, 2.70%)</title><rect x="0.6757%" y="997" width="2.7027%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="8"/><text x="0.9257%" y="1007.50">__..</text></g><g><title>__ioctl (4 samples, 1.35%)</title><rect x="3.3784%" y="965" width="1.3514%" height="15" fill="rgb(207,160,47)" fg:x="10" fg:w="4"/><text x="3.6284%" y="975.50"></text></g><g><title>InRequestCompletion (1 samples, 0.34%)</title><rect x="4.7297%" y="933" width="0.3378%" height="15" fill="rgb(228,23,34)" fg:x="14" fg:w="1"/><text x="4.9797%" y="943.50"></text></g><g><title>EventSet (1 samples, 0.34%)</title><rect x="4.7297%" y="917" width="0.3378%" height="15" fill="rgb(218,30,26)" fg:x="14" fg:w="1"/><text x="4.9797%" y="927.50"></text></g><g><title>___pthread_cond_broadcast (1 samples, 0.34%)</title><rect x="4.7297%" y="901" width="0.3378%" height="15" fill="rgb(220,122,19)" fg:x="14" fg:w="1"/><text x="4.9797%" y="911.50"></text></g><g><title>reap_for_handle (6 samples, 2.03%)</title><rect x="3.3784%" y="981" width="2.0270%" height="15" fill="rgb(250,228,42)" fg:x="10" fg:w="6"/><text x="3.6284%" y="991.50">r..</text></g><g><title>handle_bulk_completion (2 samples, 0.68%)</title><rect x="4.7297%" y="965" width="0.6757%" height="15" fill="rgb(240,193,28)" fg:x="14" fg:w="2"/><text x="4.9797%" y="975.50"></text></g><g><title>usbi_handle_transfer_completion (2 samples, 0.68%)</title><rect x="4.7297%" y="949" width="0.6757%" height="15" fill="rgb(216,20,37)" fg:x="14" fg:w="2"/><text x="4.9797%" y="959.50"></text></g><g><title>remove_from_flying_list (1 samples, 0.34%)</title><rect x="5.0676%" y="933" width="0.3378%" height="15" fill="rgb(206,188,39)" fg:x="15" fg:w="1"/><text x="5.3176%" y="943.50"></text></g><g><title>usbi_mutex_lock (1 samples, 0.34%)</title><rect x="5.0676%" y="917" width="0.3378%" height="15" fill="rgb(217,207,13)" fg:x="15" fg:w="1"/><text x="5.3176%" y="927.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.34%)</title><rect x="5.0676%" y="901" width="0.3378%" height="15" fill="rgb(231,73,38)" fg:x="15" fg:w="1"/><text x="5.3176%" y="911.50"></text></g><g><title>handle_events (16 samples, 5.41%)</title><rect x="0.3378%" y="1013" width="5.4054%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="16"/><text x="0.5878%" y="1023.50">handle_..</text></g><g><title>op_handle_events (7 samples, 2.36%)</title><rect x="3.3784%" y="997" width="2.3649%" height="15" fill="rgb(210,31,41)" fg:x="10" fg:w="7"/><text x="3.6284%" y="1007.50">op..</text></g><g><title>usbi_mutex_lock (1 samples, 0.34%)</title><rect x="5.4054%" y="981" width="0.3378%" height="15" fill="rgb(221,200,47)" fg:x="16" fg:w="1"/><text x="5.6554%" y="991.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.34%)</title><rect x="5.4054%" y="965" width="0.3378%" height="15" fill="rgb(226,26,5)" fg:x="16" fg:w="1"/><text x="5.6554%" y="975.50"></text></g><g><title>poll_async_libusb (20 samples, 6.76%)</title><rect x="0.0000%" y="1061" width="6.7568%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="20"/><text x="0.2500%" y="1071.50">poll_asyn..</text></g><g><title>libusb_handle_events_timeout (20 samples, 6.76%)</title><rect x="0.0000%" y="1045" width="6.7568%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="20"/><text x="0.2500%" y="1055.50">libusb_ha..</text></g><g><title>libusb_handle_events_timeout_completed (20 samples, 6.76%)</title><rect x="0.0000%" y="1029" width="6.7568%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="20"/><text x="0.2500%" y="1039.50">libusb_ha..</text></g><g><title>libusb_unlock_events (3 samples, 1.01%)</title><rect x="5.7432%" y="1013" width="1.0135%" height="15" fill="rgb(247,18,42)" fg:x="17" fg:w="3"/><text x="5.9932%" y="1023.50"></text></g><g><title>usbi_cond_broadcast (3 samples, 1.01%)</title><rect x="5.7432%" y="997" width="1.0135%" height="15" fill="rgb(241,131,45)" fg:x="17" fg:w="3"/><text x="5.9932%" y="1007.50"></text></g><g><title>___pthread_cond_broadcast (3 samples, 1.01%)</title><rect x="5.7432%" y="981" width="1.0135%" height="15" fill="rgb(249,31,29)" fg:x="17" fg:w="3"/><text x="5.9932%" y="991.50"></text></g><g><title>EventSet (1 samples, 0.34%)</title><rect x="7.4324%" y="1045" width="0.3378%" height="15" fill="rgb(225,111,53)" fg:x="22" fg:w="1"/><text x="7.6824%" y="1055.50"></text></g><g><title>___pthread_cond_broadcast (1 samples, 0.34%)</title><rect x="7.4324%" y="1029" width="0.3378%" height="15" fill="rgb(238,160,17)" fg:x="22" fg:w="1"/><text x="7.6824%" y="1039.50"></text></g><g><title>EventWait (4 samples, 1.35%)</title><rect x="7.7703%" y="1045" width="1.3514%" height="15" fill="rgb(214,148,48)" fg:x="23" fg:w="4"/><text x="8.0203%" y="1055.50"></text></g><g><title>___pthread_cond_timedwait (3 samples, 1.01%)</title><rect x="8.1081%" y="1029" width="1.0135%" height="15" fill="rgb(232,36,49)" fg:x="24" fg:w="3"/><text x="8.3581%" y="1039.50"></text></g><g><title>__futex_abstimed_wait_common (3 samples, 1.01%)</title><rect x="8.1081%" y="1013" width="1.0135%" height="15" fill="rgb(209,103,24)" fg:x="24" fg:w="3"/><text x="8.3581%" y="1023.50"></text></g><g><title>signalSomeEvents (1 samples, 0.34%)</title><rect x="9.1216%" y="1029" width="0.3378%" height="15" fill="rgb(229,88,8)" fg:x="27" fg:w="1"/><text x="9.3716%" y="1039.50"></text></g><g><title>processor_thread (10 samples, 3.38%)</title><rect x="6.7568%" y="1061" width="3.3784%" height="15" fill="rgb(213,181,19)" fg:x="20" fg:w="10"/><text x="7.0068%" y="1071.50">pro..</text></g><g><title>ProcessBulkInData (3 samples, 1.01%)</title><rect x="9.1216%" y="1045" width="1.0135%" height="15" fill="rgb(254,191,54)" fg:x="27" fg:w="3"/><text x="9.3716%" y="1055.50"></text></g><g><title>usleep (2 samples, 0.68%)</title><rect x="9.4595%" y="1029" width="0.6757%" height="15" fill="rgb(241,83,37)" fg:x="28" fg:w="2"/><text x="9.7095%" y="1039.50"></text></g><g><title>__GI___nanosleep (1 samples, 0.34%)</title><rect x="9.7973%" y="1013" width="0.3378%" height="15" fill="rgb(233,36,39)" fg:x="29" fg:w="1"/><text x="10.0473%" y="1023.50"></text></g><g><title>clock_nanosleep@@GLIBC_2.17 (1 samples, 0.34%)</title><rect x="9.7973%" y="997" width="0.3378%" height="15" fill="rgb(226,3,54)" fg:x="29" fg:w="1"/><text x="10.0473%" y="1007.50"></text></g><g><title>EventWait (6 samples, 2.03%)</title><rect x="10.1351%" y="1045" width="2.0270%" height="15" fill="rgb(245,192,40)" fg:x="30" fg:w="6"/><text x="10.3851%" y="1055.50">E..</text></g><g><title>___pthread_cond_timedwait (6 samples, 2.03%)</title><rect x="10.1351%" y="1029" width="2.0270%" height="15" fill="rgb(238,167,29)" fg:x="30" fg:w="6"/><text x="10.3851%" y="1039.50">_..</text></g><g><title>__futex_abstimed_wait_common (6 samples, 2.03%)</title><rect x="10.1351%" y="1013" width="2.0270%" height="15" fill="rgb(232,182,51)" fg:x="30" fg:w="6"/><text x="10.3851%" y="1023.50">_..</text></g><g><title>__pthread_disable_asynccancel (1 samples, 0.34%)</title><rect x="11.8243%" y="997" width="0.3378%" height="15" fill="rgb(231,60,39)" fg:x="35" fg:w="1"/><text x="12.0743%" y="1007.50"></text></g><g><title>add_to_flying_list (3 samples, 1.01%)</title><rect x="12.1622%" y="1013" width="1.0135%" height="15" fill="rgb(208,69,12)" fg:x="36" fg:w="3"/><text x="12.4122%" y="1023.50"></text></g><g><title>calculate_timeout (1 samples, 0.34%)</title><rect x="12.8378%" y="997" width="0.3378%" height="15" fill="rgb(235,93,37)" fg:x="38" fg:w="1"/><text x="13.0878%" y="1007.50"></text></g><g><title>op_clock_gettime (1 samples, 0.34%)</title><rect x="12.8378%" y="981" width="0.3378%" height="15" fill="rgb(213,116,39)" fg:x="38" fg:w="1"/><text x="13.0878%" y="991.50"></text></g><g><title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.34%)</title><rect x="12.8378%" y="965" width="0.3378%" height="15" fill="rgb(222,207,29)" fg:x="38" fg:w="1"/><text x="13.0878%" y="975.50"></text></g><g><title>reader_thread (13 samples, 4.39%)</title><rect x="10.1351%" y="1061" width="4.3919%" height="15" fill="rgb(206,96,30)" fg:x="30" fg:w="13"/><text x="10.3851%" y="1071.50">reade..</text></g><g><title>InRequest (7 samples, 2.36%)</title><rect x="12.1622%" y="1045" width="2.3649%" height="15" fill="rgb(218,138,4)" fg:x="36" fg:w="7"/><text x="12.4122%" y="1055.50">In..</text></g><g><title>libusb_submit_transfer (7 samples, 2.36%)</title><rect x="12.1622%" y="1029" width="2.3649%" height="15" fill="rgb(250,191,14)" fg:x="36" fg:w="7"/><text x="12.4122%" y="1039.50">li..</text></g><g><title>op_submit_transfer (4 samples, 1.35%)</title><rect x="13.1757%" y="1013" width="1.3514%" height="15" fill="rgb(239,60,40)" fg:x="39" fg:w="4"/><text x="13.4257%" y="1023.50"></text></g><g><title>submit_bulk_transfer (4 samples, 1.35%)</title><rect x="13.1757%" y="997" width="1.3514%" height="15" fill="rgb(206,27,48)" fg:x="39" fg:w="4"/><text x="13.4257%" y="1007.50"></text></g><g><title>__ioctl (4 samples, 1.35%)</title><rect x="13.1757%" y="981" width="1.3514%" height="15" fill="rgb(225,35,8)" fg:x="39" fg:w="4"/><text x="13.4257%" y="991.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.34%)</title><rect x="15.5405%" y="293" width="0.3378%" height="15" fill="rgb(250,213,24)" fg:x="46" fg:w="1"/><text x="15.7905%" y="303.50"></text></g><g><title>&lt;libftd2xx::Ft232h as ftdi_mpsse::MpsseCmdExecutor&gt;::recv (87 samples, 29.39%)</title><rect x="14.5270%" y="357" width="29.3919%" height="15" fill="rgb(247,123,22)" fg:x="43" fg:w="87"/><text x="14.7770%" y="367.50">&lt;libftd2xx::Ft232h as ftdi_mpsse::MpsseCmdExecu..</text></g><g><title>libftd2xx::FtdiCommon::read_all (87 samples, 29.39%)</title><rect x="14.5270%" y="341" width="29.3919%" height="15" fill="rgb(231,138,38)" fg:x="43" fg:w="87"/><text x="14.7770%" y="351.50">libftd2xx::FtdiCommon::read_all</text></g><g><title>libftd2xx::FtdiCommon::read (87 samples, 29.39%)</title><rect x="14.5270%" y="325" width="29.3919%" height="15" fill="rgb(231,145,46)" fg:x="43" fg:w="87"/><text x="14.7770%" y="335.50">libftd2xx::FtdiCommon::read</text></g><g><title>FT_Read (87 samples, 29.39%)</title><rect x="14.5270%" y="309" width="29.3919%" height="15" fill="rgb(251,118,11)" fg:x="43" fg:w="87"/><text x="14.7770%" y="319.50">FT_Read</text></g><g><title>usleep (83 samples, 28.04%)</title><rect x="15.8784%" y="293" width="28.0405%" height="15" fill="rgb(217,147,25)" fg:x="47" fg:w="83"/><text x="16.1284%" y="303.50">usleep</text></g><g><title>__GI___nanosleep (82 samples, 27.70%)</title><rect x="16.2162%" y="277" width="27.7027%" height="15" fill="rgb(247,81,37)" fg:x="48" fg:w="82"/><text x="16.4662%" y="287.50">__GI___nanosleep</text></g><g><title>clock_nanosleep@@GLIBC_2.17 (82 samples, 27.70%)</title><rect x="16.2162%" y="261" width="27.7027%" height="15" fill="rgb(209,12,38)" fg:x="48" fg:w="82"/><text x="16.4662%" y="271.50">clock_nanosleep@@GLIBC_2.17</text></g><g><title>libusb_alloc_transfer (2 samples, 0.68%)</title><rect x="43.9189%" y="245" width="0.6757%" height="15" fill="rgb(227,1,9)" fg:x="130" fg:w="2"/><text x="44.1689%" y="255.50"></text></g><g><title>__memset_avx2_unaligned (1 samples, 0.34%)</title><rect x="44.2568%" y="229" width="0.3378%" height="15" fill="rgb(248,47,43)" fg:x="131" fg:w="1"/><text x="44.5068%" y="239.50"></text></g><g><title>libusb_submit_transfer (1 samples, 0.34%)</title><rect x="44.5946%" y="245" width="0.3378%" height="15" fill="rgb(221,10,30)" fg:x="132" fg:w="1"/><text x="44.8446%" y="255.50"></text></g><g><title>op_submit_transfer (1 samples, 0.34%)</title><rect x="44.5946%" y="229" width="0.3378%" height="15" fill="rgb(210,229,1)" fg:x="132" fg:w="1"/><text x="44.8446%" y="239.50"></text></g><g><title>submit_bulk_transfer (1 samples, 0.34%)</title><rect x="44.5946%" y="213" width="0.3378%" height="15" fill="rgb(222,148,37)" fg:x="132" fg:w="1"/><text x="44.8446%" y="223.50"></text></g><g><title>__ioctl (1 samples, 0.34%)</title><rect x="44.5946%" y="197" width="0.3378%" height="15" fill="rgb(234,67,33)" fg:x="132" fg:w="1"/><text x="44.8446%" y="207.50"></text></g><g><title>handle_events (1 samples, 0.34%)</title><rect x="44.9324%" y="197" width="0.3378%" height="15" fill="rgb(247,98,35)" fg:x="133" fg:w="1"/><text x="45.1824%" y="207.50"></text></g><g><title>__GI___poll (1 samples, 0.34%)</title><rect x="44.9324%" y="181" width="0.3378%" height="15" fill="rgb(247,138,52)" fg:x="133" fg:w="1"/><text x="45.1824%" y="191.50"></text></g><g><title>__condvar_confirm_wakeup (1 samples, 0.34%)</title><rect x="45.2703%" y="149" width="0.3378%" height="15" fill="rgb(213,79,30)" fg:x="134" fg:w="1"/><text x="45.5203%" y="159.50"></text></g><g><title>FT_WriteSingleThread (6 samples, 2.03%)</title><rect x="43.9189%" y="293" width="2.0270%" height="15" fill="rgb(246,177,23)" fg:x="130" fg:w="6"/><text x="44.1689%" y="303.50">F..</text></g><g><title>libusb_bulk_transfer (6 samples, 2.03%)</title><rect x="43.9189%" y="277" width="2.0270%" height="15" fill="rgb(230,62,27)" fg:x="130" fg:w="6"/><text x="44.1689%" y="287.50">l..</text></g><g><title>do_sync_bulk_transfer (6 samples, 2.03%)</title><rect x="43.9189%" y="261" width="2.0270%" height="15" fill="rgb(216,154,8)" fg:x="130" fg:w="6"/><text x="44.1689%" y="271.50">d..</text></g><g><title>sync_transfer_wait_for_completion (3 samples, 1.01%)</title><rect x="44.9324%" y="245" width="1.0135%" height="15" fill="rgb(244,35,45)" fg:x="133" fg:w="3"/><text x="45.1824%" y="255.50"></text></g><g><title>libusb_handle_events_completed (3 samples, 1.01%)</title><rect x="44.9324%" y="229" width="1.0135%" height="15" fill="rgb(251,115,12)" fg:x="133" fg:w="3"/><text x="45.1824%" y="239.50"></text></g><g><title>libusb_handle_events_timeout_completed (3 samples, 1.01%)</title><rect x="44.9324%" y="213" width="1.0135%" height="15" fill="rgb(240,54,50)" fg:x="133" fg:w="3"/><text x="45.1824%" y="223.50"></text></g><g><title>libusb_wait_for_event (2 samples, 0.68%)</title><rect x="45.2703%" y="197" width="0.6757%" height="15" fill="rgb(233,84,52)" fg:x="134" fg:w="2"/><text x="45.5203%" y="207.50"></text></g><g><title>usbi_cond_timedwait (2 samples, 0.68%)</title><rect x="45.2703%" y="181" width="0.6757%" height="15" fill="rgb(207,117,47)" fg:x="134" fg:w="2"/><text x="45.5203%" y="191.50"></text></g><g><title>___pthread_cond_timedwait (2 samples, 0.68%)</title><rect x="45.2703%" y="165" width="0.6757%" height="15" fill="rgb(249,43,39)" fg:x="134" fg:w="2"/><text x="45.5203%" y="175.50"></text></g><g><title>__futex_abstimed_wait_common (1 samples, 0.34%)</title><rect x="45.6081%" y="149" width="0.3378%" height="15" fill="rgb(209,38,44)" fg:x="135" fg:w="1"/><text x="45.8581%" y="159.50"></text></g><g><title>&lt;libftd2xx::Ft232h as ftdi_mpsse::MpsseCmdExecutor&gt;::send (7 samples, 2.36%)</title><rect x="43.9189%" y="357" width="2.3649%" height="15" fill="rgb(236,212,23)" fg:x="130" fg:w="7"/><text x="44.1689%" y="367.50">&lt;l..</text></g><g><title>libftd2xx::FtdiCommon::write_all (7 samples, 2.36%)</title><rect x="43.9189%" y="341" width="2.3649%" height="15" fill="rgb(242,79,21)" fg:x="130" fg:w="7"/><text x="44.1689%" y="351.50">li..</text></g><g><title>libftd2xx::FtdiCommon::write (7 samples, 2.36%)</title><rect x="43.9189%" y="325" width="2.3649%" height="15" fill="rgb(211,96,35)" fg:x="130" fg:w="7"/><text x="44.1689%" y="335.50">li..</text></g><g><title>FT_Write (7 samples, 2.36%)</title><rect x="43.9189%" y="309" width="2.3649%" height="15" fill="rgb(253,215,40)" fg:x="130" fg:w="7"/><text x="44.1689%" y="319.50">FT..</text></g><g><title>usleep (1 samples, 0.34%)</title><rect x="45.9459%" y="293" width="0.3378%" height="15" fill="rgb(211,81,21)" fg:x="136" fg:w="1"/><text x="46.1959%" y="303.50"></text></g><g><title>__GI___nanosleep (1 samples, 0.34%)</title><rect x="45.9459%" y="277" width="0.3378%" height="15" fill="rgb(208,190,38)" fg:x="136" fg:w="1"/><text x="46.1959%" y="287.50"></text></g><g><title>clock_nanosleep@@GLIBC_2.17 (1 samples, 0.34%)</title><rect x="45.9459%" y="261" width="0.3378%" height="15" fill="rgb(235,213,38)" fg:x="136" fg:w="1"/><text x="46.1959%" y="271.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (95 samples, 32.09%)</title><rect x="14.5270%" y="629" width="32.0946%" height="15" fill="rgb(237,122,38)" fg:x="43" fg:w="95"/><text x="14.7770%" y="639.50">rayon_core::join::join_context::call_b::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (95 samples, 32.09%)</title><rect x="14.5270%" y="613" width="32.0946%" height="15" fill="rgb(244,218,35)" fg:x="43" fg:w="95"/><text x="14.7770%" y="623.50">rayon::iter::plumbing::bridge_producer_consumer::hel..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (95 samples, 32.09%)</title><rect x="14.5270%" y="597" width="32.0946%" height="15" fill="rgb(240,68,47)" fg:x="43" fg:w="95"/><text x="14.7770%" y="607.50">rayon::iter::plumbing::bridge_producer_consumer::hel..</text></g><g><title>rayon::iter::plumbing::Producer::fold_with (95 samples, 32.09%)</title><rect x="14.5270%" y="581" width="32.0946%" height="15" fill="rgb(210,16,53)" fg:x="43" fg:w="95"/><text x="14.7770%" y="591.50">rayon::iter::plumbing::Producer::fold_with</text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (95 samples, 32.09%)</title><rect x="14.5270%" y="565" width="32.0946%" height="15" fill="rgb(235,124,12)" fg:x="43" fg:w="95"/><text x="14.7770%" y="575.50">&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::pl..</text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (95 samples, 32.09%)</title><rect x="14.5270%" y="549" width="32.0946%" height="15" fill="rgb(224,169,11)" fg:x="43" fg:w="95"/><text x="14.7770%" y="559.50">rayon::iter::plumbing::Folder::consume_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (95 samples, 32.09%)</title><rect x="14.5270%" y="533" width="32.0946%" height="15" fill="rgb(250,166,2)" fg:x="43" fg:w="95"/><text x="14.7770%" y="543.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::..</text></g><g><title>core::option::Option&lt;T&gt;::map (95 samples, 32.09%)</title><rect x="14.5270%" y="517" width="32.0946%" height="15" fill="rgb(242,216,29)" fg:x="43" fg:w="95"/><text x="14.7770%" y="527.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (95 samples, 32.09%)</title><rect x="14.5270%" y="501" width="32.0946%" height="15" fill="rgb(230,116,27)" fg:x="43" fg:w="95"/><text x="14.7770%" y="511.50">core::ops::function::impls::&lt;impl core::ops::functio..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (95 samples, 32.09%)</title><rect x="14.5270%" y="485" width="32.0946%" height="15" fill="rgb(228,99,48)" fg:x="43" fg:w="95"/><text x="14.7770%" y="495.50">core::ops::function::impls::&lt;impl core::ops::functio..</text></g><g><title>lus_positioning_control::control::compute_control::{{closure}} (95 samples, 32.09%)</title><rect x="14.5270%" y="469" width="32.0946%" height="15" fill="rgb(253,11,6)" fg:x="43" fg:w="95"/><text x="14.7770%" y="479.50">lus_positioning_control::control::compute_control::{..</text></g><g><title>lus_positioning_control::control::read_voltage (95 samples, 32.09%)</title><rect x="14.5270%" y="453" width="32.0946%" height="15" fill="rgb(247,143,39)" fg:x="43" fg:w="95"/><text x="14.7770%" y="463.50">lus_positioning_control::control::read_voltage</text></g><g><title>ads1x1x::devices::mode::continuous::&lt;impl ads1x1x::types::Ads1x1x&lt;I2C,IC,CONV,ads1x1x::types::mode::Continuous&gt;&gt;::read (95 samples, 32.09%)</title><rect x="14.5270%" y="437" width="32.0946%" height="15" fill="rgb(236,97,10)" fg:x="43" fg:w="95"/><text x="14.7770%" y="447.50">ads1x1x::devices::mode::continuous::&lt;impl ads1x1x::t..</text></g><g><title>ads1x1x::devices::common::&lt;impl ads1x1x::types::Ads1x1x&lt;I2C,IC,CONV,MODE&gt;&gt;::read_register (95 samples, 32.09%)</title><rect x="14.5270%" y="421" width="32.0946%" height="15" fill="rgb(233,208,19)" fg:x="43" fg:w="95"/><text x="14.7770%" y="431.50">ads1x1x::devices::common::&lt;impl ads1x1x::types::Ads1..</text></g><g><title>embedded_hal::i2c::I2c::write_read (95 samples, 32.09%)</title><rect x="14.5270%" y="405" width="32.0946%" height="15" fill="rgb(216,164,2)" fg:x="43" fg:w="95"/><text x="14.7770%" y="415.50">embedded_hal::i2c::I2c::write_read</text></g><g><title>&lt;ftdi_embedded_hal::i2c::I2c&lt;Device&gt; as embedded_hal::i2c::I2c&gt;::transaction (95 samples, 32.09%)</title><rect x="14.5270%" y="389" width="32.0946%" height="15" fill="rgb(220,129,5)" fg:x="43" fg:w="95"/><text x="14.7770%" y="399.50">&lt;ftdi_embedded_hal::i2c::I2c&lt;Device&gt; as embedded_hal..</text></g><g><title>ftdi_embedded_hal::i2c::I2c&lt;Device&gt;::transaction (95 samples, 32.09%)</title><rect x="14.5270%" y="373" width="32.0946%" height="15" fill="rgb(242,17,10)" fg:x="43" fg:w="95"/><text x="14.7770%" y="383.50">ftdi_embedded_hal::i2c::I2c&lt;Device&gt;::transaction</text></g><g><title>ftdi_mpsse::MpsseCmdBuilder::set_gpio_lower (1 samples, 0.34%)</title><rect x="46.2838%" y="357" width="0.3378%" height="15" fill="rgb(242,107,0)" fg:x="137" fg:w="1"/><text x="46.5338%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.34%)</title><rect x="46.2838%" y="341" width="0.3378%" height="15" fill="rgb(251,28,31)" fg:x="137" fg:w="1"/><text x="46.5338%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.34%)</title><rect x="46.2838%" y="325" width="0.3378%" height="15" fill="rgb(233,223,10)" fg:x="137" fg:w="1"/><text x="46.5338%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.34%)</title><rect x="46.2838%" y="309" width="0.3378%" height="15" fill="rgb(215,21,27)" fg:x="137" fg:w="1"/><text x="46.5338%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.34%)</title><rect x="46.2838%" y="293" width="0.3378%" height="15" fill="rgb(232,23,21)" fg:x="137" fg:w="1"/><text x="46.5338%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.34%)</title><rect x="46.2838%" y="277" width="0.3378%" height="15" fill="rgb(244,5,23)" fg:x="137" fg:w="1"/><text x="46.5338%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1 samples, 0.34%)</title><rect x="46.2838%" y="261" width="0.3378%" height="15" fill="rgb(226,81,46)" fg:x="137" fg:w="1"/><text x="46.5338%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.34%)</title><rect x="46.2838%" y="245" width="0.3378%" height="15" fill="rgb(247,70,30)" fg:x="137" fg:w="1"/><text x="46.5338%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.34%)</title><rect x="46.2838%" y="229" width="0.3378%" height="15" fill="rgb(212,68,19)" fg:x="137" fg:w="1"/><text x="46.5338%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.34%)</title><rect x="46.2838%" y="213" width="0.3378%" height="15" fill="rgb(240,187,13)" fg:x="137" fg:w="1"/><text x="46.5338%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.34%)</title><rect x="46.2838%" y="197" width="0.3378%" height="15" fill="rgb(223,113,26)" fg:x="137" fg:w="1"/><text x="46.5338%" y="207.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.34%)</title><rect x="46.2838%" y="181" width="0.3378%" height="15" fill="rgb(206,192,2)" fg:x="137" fg:w="1"/><text x="46.5338%" y="191.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.34%)</title><rect x="46.2838%" y="165" width="0.3378%" height="15" fill="rgb(241,108,4)" fg:x="137" fg:w="1"/><text x="46.5338%" y="175.50"></text></g><g><title>__realloc (1 samples, 0.34%)</title><rect x="46.2838%" y="149" width="0.3378%" height="15" fill="rgb(247,173,49)" fg:x="137" fg:w="1"/><text x="46.5338%" y="159.50"></text></g><g><title>_int_realloc (1 samples, 0.34%)</title><rect x="46.2838%" y="133" width="0.3378%" height="15" fill="rgb(224,114,35)" fg:x="137" fg:w="1"/><text x="46.5338%" y="143.50"></text></g><g><title>_int_free (1 samples, 0.34%)</title><rect x="46.2838%" y="117" width="0.3378%" height="15" fill="rgb(245,159,27)" fg:x="137" fg:w="1"/><text x="46.5338%" y="127.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (1 samples, 0.34%)</title><rect x="48.3108%" y="181" width="0.3378%" height="15" fill="rgb(245,172,44)" fg:x="143" fg:w="1"/><text x="48.5608%" y="191.50"></text></g><g><title>&lt;libftd2xx::Ft232h as ftdi_mpsse::MpsseCmdExecutor&gt;::recv (89 samples, 30.07%)</title><rect x="46.9595%" y="245" width="30.0676%" height="15" fill="rgb(236,23,11)" fg:x="139" fg:w="89"/><text x="47.2095%" y="255.50">&lt;libftd2xx::Ft232h as ftdi_mpsse::MpsseCmdExecut..</text></g><g><title>libftd2xx::FtdiCommon::read_all (89 samples, 30.07%)</title><rect x="46.9595%" y="229" width="30.0676%" height="15" fill="rgb(205,117,38)" fg:x="139" fg:w="89"/><text x="47.2095%" y="239.50">libftd2xx::FtdiCommon::read_all</text></g><g><title>libftd2xx::FtdiCommon::read (89 samples, 30.07%)</title><rect x="46.9595%" y="213" width="30.0676%" height="15" fill="rgb(237,72,25)" fg:x="139" fg:w="89"/><text x="47.2095%" y="223.50">libftd2xx::FtdiCommon::read</text></g><g><title>FT_Read (89 samples, 30.07%)</title><rect x="46.9595%" y="197" width="30.0676%" height="15" fill="rgb(244,70,9)" fg:x="139" fg:w="89"/><text x="47.2095%" y="207.50">FT_Read</text></g><g><title>usleep (84 samples, 28.38%)</title><rect x="48.6486%" y="181" width="28.3784%" height="15" fill="rgb(217,125,39)" fg:x="144" fg:w="84"/><text x="48.8986%" y="191.50">usleep</text></g><g><title>__GI___nanosleep (84 samples, 28.38%)</title><rect x="48.6486%" y="165" width="28.3784%" height="15" fill="rgb(235,36,10)" fg:x="144" fg:w="84"/><text x="48.8986%" y="175.50">__GI___nanosleep</text></g><g><title>clock_nanosleep@@GLIBC_2.17 (84 samples, 28.38%)</title><rect x="48.6486%" y="149" width="28.3784%" height="15" fill="rgb(251,123,47)" fg:x="144" fg:w="84"/><text x="48.8986%" y="159.50">clock_nanosleep@@GLIBC_2.17</text></g><g><title>libusb_free_transfer (1 samples, 0.34%)</title><rect x="77.7027%" y="133" width="0.3378%" height="15" fill="rgb(221,13,13)" fg:x="230" fg:w="1"/><text x="77.9527%" y="143.50"></text></g><g><title>free (1 samples, 0.34%)</title><rect x="77.7027%" y="117" width="0.3378%" height="15" fill="rgb(238,131,9)" fg:x="230" fg:w="1"/><text x="77.9527%" y="127.50"></text></g><g><title>add_to_flying_list (1 samples, 0.34%)</title><rect x="78.0405%" y="117" width="0.3378%" height="15" fill="rgb(211,50,8)" fg:x="231" fg:w="1"/><text x="78.2905%" y="127.50"></text></g><g><title>calculate_timeout (1 samples, 0.34%)</title><rect x="78.0405%" y="101" width="0.3378%" height="15" fill="rgb(245,182,24)" fg:x="231" fg:w="1"/><text x="78.2905%" y="111.50"></text></g><g><title>op_clock_gettime (1 samples, 0.34%)</title><rect x="78.0405%" y="85" width="0.3378%" height="15" fill="rgb(242,14,37)" fg:x="231" fg:w="1"/><text x="78.2905%" y="95.50"></text></g><g><title>clock_gettime@GLIBC_2.2.5 (1 samples, 0.34%)</title><rect x="78.0405%" y="69" width="0.3378%" height="15" fill="rgb(246,228,12)" fg:x="231" fg:w="1"/><text x="78.2905%" y="79.50"></text></g><g><title>libusb_ref_device (1 samples, 0.34%)</title><rect x="78.3784%" y="117" width="0.3378%" height="15" fill="rgb(213,55,15)" fg:x="232" fg:w="1"/><text x="78.6284%" y="127.50"></text></g><g><title>usbi_mutex_lock (1 samples, 0.34%)</title><rect x="78.3784%" y="101" width="0.3378%" height="15" fill="rgb(209,9,3)" fg:x="232" fg:w="1"/><text x="78.6284%" y="111.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.34%)</title><rect x="78.3784%" y="85" width="0.3378%" height="15" fill="rgb(230,59,30)" fg:x="232" fg:w="1"/><text x="78.6284%" y="95.50"></text></g><g><title>op_submit_transfer (6 samples, 2.03%)</title><rect x="78.7162%" y="117" width="2.0270%" height="15" fill="rgb(209,121,21)" fg:x="233" fg:w="6"/><text x="78.9662%" y="127.50">o..</text></g><g><title>submit_bulk_transfer (6 samples, 2.03%)</title><rect x="78.7162%" y="101" width="2.0270%" height="15" fill="rgb(220,109,13)" fg:x="233" fg:w="6"/><text x="78.9662%" y="111.50">s..</text></g><g><title>__ioctl (6 samples, 2.03%)</title><rect x="78.7162%" y="85" width="2.0270%" height="15" fill="rgb(232,18,1)" fg:x="233" fg:w="6"/><text x="78.9662%" y="95.50">_..</text></g><g><title>libusb_submit_transfer (9 samples, 3.04%)</title><rect x="78.0405%" y="133" width="3.0405%" height="15" fill="rgb(215,41,42)" fg:x="231" fg:w="9"/><text x="78.2905%" y="143.50">lib..</text></g><g><title>usbi_mutex_unlock (1 samples, 0.34%)</title><rect x="80.7432%" y="117" width="0.3378%" height="15" fill="rgb(224,123,36)" fg:x="239" fg:w="1"/><text x="80.9932%" y="127.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (1 samples, 0.34%)</title><rect x="80.7432%" y="101" width="0.3378%" height="15" fill="rgb(240,125,3)" fg:x="239" fg:w="1"/><text x="80.9932%" y="111.50"></text></g><g><title>libusb_unlock_event_waiters (1 samples, 0.34%)</title><rect x="81.0811%" y="85" width="0.3378%" height="15" fill="rgb(205,98,50)" fg:x="240" fg:w="1"/><text x="81.3311%" y="95.50"></text></g><g><title>usbi_mutex_unlock (1 samples, 0.34%)</title><rect x="81.0811%" y="69" width="0.3378%" height="15" fill="rgb(205,185,37)" fg:x="240" fg:w="1"/><text x="81.3311%" y="79.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (1 samples, 0.34%)</title><rect x="81.0811%" y="53" width="0.3378%" height="15" fill="rgb(238,207,15)" fg:x="240" fg:w="1"/><text x="81.3311%" y="63.50"></text></g><g><title>__lll_lock_wake (1 samples, 0.34%)</title><rect x="81.0811%" y="37" width="0.3378%" height="15" fill="rgb(213,199,42)" fg:x="240" fg:w="1"/><text x="81.3311%" y="47.50"></text></g><g><title>__futex_abstimed_wait_common (2 samples, 0.68%)</title><rect x="81.4189%" y="37" width="0.6757%" height="15" fill="rgb(235,201,11)" fg:x="241" fg:w="2"/><text x="81.6689%" y="47.50"></text></g><g><title>FT_WriteSingleThread (14 samples, 4.73%)</title><rect x="77.7027%" y="181" width="4.7297%" height="15" fill="rgb(207,46,11)" fg:x="230" fg:w="14"/><text x="77.9527%" y="191.50">FT_Wri..</text></g><g><title>libusb_bulk_transfer (14 samples, 4.73%)</title><rect x="77.7027%" y="165" width="4.7297%" height="15" fill="rgb(241,35,35)" fg:x="230" fg:w="14"/><text x="77.9527%" y="175.50">libusb..</text></g><g><title>do_sync_bulk_transfer (14 samples, 4.73%)</title><rect x="77.7027%" y="149" width="4.7297%" height="15" fill="rgb(243,32,47)" fg:x="230" fg:w="14"/><text x="77.9527%" y="159.50">do_syn..</text></g><g><title>sync_transfer_wait_for_completion (4 samples, 1.35%)</title><rect x="81.0811%" y="133" width="1.3514%" height="15" fill="rgb(247,202,23)" fg:x="240" fg:w="4"/><text x="81.3311%" y="143.50"></text></g><g><title>libusb_handle_events_completed (4 samples, 1.35%)</title><rect x="81.0811%" y="117" width="1.3514%" height="15" fill="rgb(219,102,11)" fg:x="240" fg:w="4"/><text x="81.3311%" y="127.50"></text></g><g><title>libusb_handle_events_timeout_completed (4 samples, 1.35%)</title><rect x="81.0811%" y="101" width="1.3514%" height="15" fill="rgb(243,110,44)" fg:x="240" fg:w="4"/><text x="81.3311%" y="111.50"></text></g><g><title>libusb_wait_for_event (3 samples, 1.01%)</title><rect x="81.4189%" y="85" width="1.0135%" height="15" fill="rgb(222,74,54)" fg:x="241" fg:w="3"/><text x="81.6689%" y="95.50"></text></g><g><title>usbi_cond_timedwait (3 samples, 1.01%)</title><rect x="81.4189%" y="69" width="1.0135%" height="15" fill="rgb(216,99,12)" fg:x="241" fg:w="3"/><text x="81.6689%" y="79.50"></text></g><g><title>___pthread_cond_timedwait (3 samples, 1.01%)</title><rect x="81.4189%" y="53" width="1.0135%" height="15" fill="rgb(226,22,26)" fg:x="241" fg:w="3"/><text x="81.6689%" y="63.50"></text></g><g><title>__pthread_mutex_cond_lock (1 samples, 0.34%)</title><rect x="82.0946%" y="37" width="0.3378%" height="15" fill="rgb(217,163,10)" fg:x="243" fg:w="1"/><text x="82.3446%" y="47.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (204 samples, 68.92%)</title><rect x="14.5270%" y="789" width="68.9189%" height="15" fill="rgb(213,25,53)" fg:x="43" fg:w="204"/><text x="14.7770%" y="799.50">rayon_core::registry::WorkerThread::execute</text></g><g><title>rayon_core::job::JobRef::execute (204 samples, 68.92%)</title><rect x="14.5270%" y="773" width="68.9189%" height="15" fill="rgb(252,105,26)" fg:x="43" fg:w="204"/><text x="14.7770%" y="783.50">rayon_core::job::JobRef::execute</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (204 samples, 68.92%)</title><rect x="14.5270%" y="757" width="68.9189%" height="15" fill="rgb(220,39,43)" fg:x="43" fg:w="204"/><text x="14.7770%" y="767.50">&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call (204 samples, 68.92%)</title><rect x="14.5270%" y="741" width="68.9189%" height="15" fill="rgb(229,68,48)" fg:x="43" fg:w="204"/><text x="14.7770%" y="751.50">rayon_core::job::JobResult&lt;T&gt;::call</text></g><g><title>rayon_core::unwind::halt_unwinding (204 samples, 68.92%)</title><rect x="14.5270%" y="725" width="68.9189%" height="15" fill="rgb(252,8,32)" fg:x="43" fg:w="204"/><text x="14.7770%" y="735.50">rayon_core::unwind::halt_unwinding</text></g><g><title>std::panic::catch_unwind (204 samples, 68.92%)</title><rect x="14.5270%" y="709" width="68.9189%" height="15" fill="rgb(223,20,43)" fg:x="43" fg:w="204"/><text x="14.7770%" y="719.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (204 samples, 68.92%)</title><rect x="14.5270%" y="693" width="68.9189%" height="15" fill="rgb(229,81,49)" fg:x="43" fg:w="204"/><text x="14.7770%" y="703.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (204 samples, 68.92%)</title><rect x="14.5270%" y="677" width="68.9189%" height="15" fill="rgb(236,28,36)" fg:x="43" fg:w="204"/><text x="14.7770%" y="687.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (204 samples, 68.92%)</title><rect x="14.5270%" y="661" width="68.9189%" height="15" fill="rgb(249,185,26)" fg:x="43" fg:w="204"/><text x="14.7770%" y="671.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call::{{closure}} (204 samples, 68.92%)</title><rect x="14.5270%" y="645" width="68.9189%" height="15" fill="rgb(249,174,33)" fg:x="43" fg:w="204"/><text x="14.7770%" y="655.50">rayon_core::job::JobResult&lt;T&gt;::call::{{closure}}</text></g><g><title>rayon_core::registry::Registry::in_worker_cold::{{closure}}::{{closure}} (109 samples, 36.82%)</title><rect x="46.6216%" y="629" width="36.8243%" height="15" fill="rgb(233,201,37)" fg:x="138" fg:w="109"/><text x="46.8716%" y="639.50">rayon_core::registry::Registry::in_worker_cold::{{closure}}:..</text></g><g><title>rayon_core::join::join_context::{{closure}} (109 samples, 36.82%)</title><rect x="46.6216%" y="613" width="36.8243%" height="15" fill="rgb(221,78,26)" fg:x="138" fg:w="109"/><text x="46.8716%" y="623.50">rayon_core::join::join_context::{{closure}}</text></g><g><title>rayon_core::unwind::halt_unwinding (109 samples, 36.82%)</title><rect x="46.6216%" y="597" width="36.8243%" height="15" fill="rgb(250,127,30)" fg:x="138" fg:w="109"/><text x="46.8716%" y="607.50">rayon_core::unwind::halt_unwinding</text></g><g><title>std::panic::catch_unwind (109 samples, 36.82%)</title><rect x="46.6216%" y="581" width="36.8243%" height="15" fill="rgb(230,49,44)" fg:x="138" fg:w="109"/><text x="46.8716%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (109 samples, 36.82%)</title><rect x="46.6216%" y="565" width="36.8243%" height="15" fill="rgb(229,67,23)" fg:x="138" fg:w="109"/><text x="46.8716%" y="575.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (109 samples, 36.82%)</title><rect x="46.6216%" y="549" width="36.8243%" height="15" fill="rgb(249,83,47)" fg:x="138" fg:w="109"/><text x="46.8716%" y="559.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (109 samples, 36.82%)</title><rect x="46.6216%" y="533" width="36.8243%" height="15" fill="rgb(215,43,3)" fg:x="138" fg:w="109"/><text x="46.8716%" y="543.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops:..</text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (109 samples, 36.82%)</title><rect x="46.6216%" y="517" width="36.8243%" height="15" fill="rgb(238,154,13)" fg:x="138" fg:w="109"/><text x="46.8716%" y="527.50">rayon_core::join::join_context::call_a::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (109 samples, 36.82%)</title><rect x="46.6216%" y="501" width="36.8243%" height="15" fill="rgb(219,56,2)" fg:x="138" fg:w="109"/><text x="46.8716%" y="511.50">rayon::iter::plumbing::bridge_producer_consumer::helper::{{c..</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (109 samples, 36.82%)</title><rect x="46.6216%" y="485" width="36.8243%" height="15" fill="rgb(233,0,4)" fg:x="138" fg:w="109"/><text x="46.8716%" y="495.50">rayon::iter::plumbing::bridge_producer_consumer::helper</text></g><g><title>rayon::iter::plumbing::Producer::fold_with (109 samples, 36.82%)</title><rect x="46.6216%" y="469" width="36.8243%" height="15" fill="rgb(235,30,7)" fg:x="138" fg:w="109"/><text x="46.8716%" y="479.50">rayon::iter::plumbing::Producer::fold_with</text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (109 samples, 36.82%)</title><rect x="46.6216%" y="453" width="36.8243%" height="15" fill="rgb(250,79,13)" fg:x="138" fg:w="109"/><text x="46.8716%" y="463.50">&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::..</text></g><g><title>rayon::iter::plumbing::Folder::consume_iter (109 samples, 36.82%)</title><rect x="46.6216%" y="437" width="36.8243%" height="15" fill="rgb(211,146,34)" fg:x="138" fg:w="109"/><text x="46.8716%" y="447.50">rayon::iter::plumbing::Folder::consume_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (109 samples, 36.82%)</title><rect x="46.6216%" y="421" width="36.8243%" height="15" fill="rgb(228,22,38)" fg:x="138" fg:w="109"/><text x="46.8716%" y="431.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::..</text></g><g><title>core::option::Option&lt;T&gt;::map (109 samples, 36.82%)</title><rect x="46.6216%" y="405" width="36.8243%" height="15" fill="rgb(235,168,5)" fg:x="138" fg:w="109"/><text x="46.8716%" y="415.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (109 samples, 36.82%)</title><rect x="46.6216%" y="389" width="36.8243%" height="15" fill="rgb(221,155,16)" fg:x="138" fg:w="109"/><text x="46.8716%" y="399.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnc..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (109 samples, 36.82%)</title><rect x="46.6216%" y="373" width="36.8243%" height="15" fill="rgb(215,215,53)" fg:x="138" fg:w="109"/><text x="46.8716%" y="383.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut..</text></g><g><title>lus_positioning_control::control::compute_control::{{closure}} (109 samples, 36.82%)</title><rect x="46.6216%" y="357" width="36.8243%" height="15" fill="rgb(223,4,10)" fg:x="138" fg:w="109"/><text x="46.8716%" y="367.50">lus_positioning_control::control::compute_control::{{closure..</text></g><g><title>lus_positioning_control::control::read_voltage (109 samples, 36.82%)</title><rect x="46.6216%" y="341" width="36.8243%" height="15" fill="rgb(234,103,6)" fg:x="138" fg:w="109"/><text x="46.8716%" y="351.50">lus_positioning_control::control::read_voltage</text></g><g><title>ads1x1x::devices::mode::continuous::&lt;impl ads1x1x::types::Ads1x1x&lt;I2C,IC,CONV,ads1x1x::types::mode::Continuous&gt;&gt;::read (109 samples, 36.82%)</title><rect x="46.6216%" y="325" width="36.8243%" height="15" fill="rgb(227,97,0)" fg:x="138" fg:w="109"/><text x="46.8716%" y="335.50">ads1x1x::devices::mode::continuous::&lt;impl ads1x1x::types::Ad..</text></g><g><title>ads1x1x::devices::common::&lt;impl ads1x1x::types::Ads1x1x&lt;I2C,IC,CONV,MODE&gt;&gt;::read_register (109 samples, 36.82%)</title><rect x="46.6216%" y="309" width="36.8243%" height="15" fill="rgb(234,150,53)" fg:x="138" fg:w="109"/><text x="46.8716%" y="319.50">ads1x1x::devices::common::&lt;impl ads1x1x::types::Ads1x1x&lt;I2C,..</text></g><g><title>embedded_hal::i2c::I2c::write_read (109 samples, 36.82%)</title><rect x="46.6216%" y="293" width="36.8243%" height="15" fill="rgb(228,201,54)" fg:x="138" fg:w="109"/><text x="46.8716%" y="303.50">embedded_hal::i2c::I2c::write_read</text></g><g><title>&lt;ftdi_embedded_hal::i2c::I2c&lt;Device&gt; as embedded_hal::i2c::I2c&gt;::transaction (109 samples, 36.82%)</title><rect x="46.6216%" y="277" width="36.8243%" height="15" fill="rgb(222,22,37)" fg:x="138" fg:w="109"/><text x="46.8716%" y="287.50">&lt;ftdi_embedded_hal::i2c::I2c&lt;Device&gt; as embedded_hal::i2c::I..</text></g><g><title>ftdi_embedded_hal::i2c::I2c&lt;Device&gt;::transaction (108 samples, 36.49%)</title><rect x="46.9595%" y="261" width="36.4865%" height="15" fill="rgb(237,53,32)" fg:x="139" fg:w="108"/><text x="47.2095%" y="271.50">ftdi_embedded_hal::i2c::I2c&lt;Device&gt;::transaction</text></g><g><title>&lt;libftd2xx::Ft232h as ftdi_mpsse::MpsseCmdExecutor&gt;::send (19 samples, 6.42%)</title><rect x="77.0270%" y="245" width="6.4189%" height="15" fill="rgb(233,25,53)" fg:x="228" fg:w="19"/><text x="77.2770%" y="255.50">&lt;libftd2..</text></g><g><title>libftd2xx::FtdiCommon::write_all (19 samples, 6.42%)</title><rect x="77.0270%" y="229" width="6.4189%" height="15" fill="rgb(210,40,34)" fg:x="228" fg:w="19"/><text x="77.2770%" y="239.50">libftd2x..</text></g><g><title>libftd2xx::FtdiCommon::write (19 samples, 6.42%)</title><rect x="77.0270%" y="213" width="6.4189%" height="15" fill="rgb(241,220,44)" fg:x="228" fg:w="19"/><text x="77.2770%" y="223.50">libftd2x..</text></g><g><title>FT_Write (19 samples, 6.42%)</title><rect x="77.0270%" y="197" width="6.4189%" height="15" fill="rgb(235,28,35)" fg:x="228" fg:w="19"/><text x="77.2770%" y="207.50">FT_Write</text></g><g><title>usleep (3 samples, 1.01%)</title><rect x="82.4324%" y="181" width="1.0135%" height="15" fill="rgb(210,56,17)" fg:x="244" fg:w="3"/><text x="82.6824%" y="191.50"></text></g><g><title>__GI___nanosleep (3 samples, 1.01%)</title><rect x="82.4324%" y="165" width="1.0135%" height="15" fill="rgb(224,130,29)" fg:x="244" fg:w="3"/><text x="82.6824%" y="175.50"></text></g><g><title>clock_nanosleep@@GLIBC_2.17 (3 samples, 1.01%)</title><rect x="82.4324%" y="149" width="1.0135%" height="15" fill="rgb(235,212,8)" fg:x="244" fg:w="3"/><text x="82.6824%" y="159.50"></text></g><g><title>__pthread_enable_asynccancel (1 samples, 0.34%)</title><rect x="83.1081%" y="133" width="0.3378%" height="15" fill="rgb(223,33,50)" fg:x="246" fg:w="1"/><text x="83.3581%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (1 samples, 0.34%)</title><rect x="83.4459%" y="725" width="0.3378%" height="15" fill="rgb(219,149,13)" fg:x="247" fg:w="1"/><text x="83.6959%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.34%)</title><rect x="83.7838%" y="581" width="0.3378%" height="15" fill="rgb(250,156,29)" fg:x="248" fg:w="1"/><text x="84.0338%" y="591.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (1 samples, 0.34%)</title><rect x="83.7838%" y="565" width="0.3378%" height="15" fill="rgb(216,193,19)" fg:x="248" fg:w="1"/><text x="84.0338%" y="575.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.34%)</title><rect x="83.7838%" y="549" width="0.3378%" height="15" fill="rgb(216,135,14)" fg:x="248" fg:w="1"/><text x="84.0338%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicIsize::load (1 samples, 0.34%)</title><rect x="84.1216%" y="581" width="0.3378%" height="15" fill="rgb(241,47,5)" fg:x="249" fg:w="1"/><text x="84.3716%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.34%)</title><rect x="84.1216%" y="565" width="0.3378%" height="15" fill="rgb(233,42,35)" fg:x="249" fg:w="1"/><text x="84.3716%" y="575.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work (4 samples, 1.35%)</title><rect x="83.4459%" y="789" width="1.3514%" height="15" fill="rgb(231,13,6)" fg:x="247" fg:w="4"/><text x="83.6959%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (4 samples, 1.35%)</title><rect x="83.4459%" y="773" width="1.3514%" height="15" fill="rgb(207,181,40)" fg:x="247" fg:w="4"/><text x="83.6959%" y="783.50"></text></g><g><title>rayon_core::registry::WorkerThread::find_work::{{closure}} (4 samples, 1.35%)</title><rect x="83.4459%" y="757" width="1.3514%" height="15" fill="rgb(254,173,49)" fg:x="247" fg:w="4"/><text x="83.6959%" y="767.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal (4 samples, 1.35%)</title><rect x="83.4459%" y="741" width="1.3514%" height="15" fill="rgb(221,1,38)" fg:x="247" fg:w="4"/><text x="83.6959%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (3 samples, 1.01%)</title><rect x="83.7838%" y="725" width="1.0135%" height="15" fill="rgb(206,124,46)" fg:x="248" fg:w="3"/><text x="84.0338%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 1.01%)</title><rect x="83.7838%" y="709" width="1.0135%" height="15" fill="rgb(249,21,11)" fg:x="248" fg:w="3"/><text x="84.0338%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 1.01%)</title><rect x="83.7838%" y="693" width="1.0135%" height="15" fill="rgb(222,201,40)" fg:x="248" fg:w="3"/><text x="84.0338%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 1.01%)</title><rect x="83.7838%" y="677" width="1.0135%" height="15" fill="rgb(235,61,29)" fg:x="248" fg:w="3"/><text x="84.0338%" y="687.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3 samples, 1.01%)</title><rect x="83.7838%" y="661" width="1.0135%" height="15" fill="rgb(219,207,3)" fg:x="248" fg:w="3"/><text x="84.0338%" y="671.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::{{closure}} (3 samples, 1.01%)</title><rect x="83.7838%" y="645" width="1.0135%" height="15" fill="rgb(222,56,46)" fg:x="248" fg:w="3"/><text x="84.0338%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (3 samples, 1.01%)</title><rect x="83.7838%" y="629" width="1.0135%" height="15" fill="rgb(239,76,54)" fg:x="248" fg:w="3"/><text x="84.0338%" y="639.50"></text></g><g><title>rayon_core::registry::WorkerThread::steal::{{closure}} (3 samples, 1.01%)</title><rect x="83.7838%" y="613" width="1.0135%" height="15" fill="rgb(231,124,27)" fg:x="248" fg:w="3"/><text x="84.0338%" y="623.50"></text></g><g><title>crossbeam_deque::deque::Stealer&lt;T&gt;::steal (3 samples, 1.01%)</title><rect x="83.7838%" y="597" width="1.0135%" height="15" fill="rgb(249,195,6)" fg:x="248" fg:w="3"/><text x="84.0338%" y="607.50"></text></g><g><title>crossbeam_epoch::default::pin (1 samples, 0.34%)</title><rect x="84.4595%" y="581" width="0.3378%" height="15" fill="rgb(237,174,47)" fg:x="250" fg:w="1"/><text x="84.7095%" y="591.50"></text></g><g><title>crossbeam_epoch::default::with_handle (1 samples, 0.34%)</title><rect x="84.4595%" y="565" width="0.3378%" height="15" fill="rgb(206,201,31)" fg:x="250" fg:w="1"/><text x="84.7095%" y="575.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.34%)</title><rect x="84.4595%" y="549" width="0.3378%" height="15" fill="rgb(231,57,52)" fg:x="250" fg:w="1"/><text x="84.7095%" y="559.50"></text></g><g><title>crossbeam_epoch::default::with_handle::{{closure}} (1 samples, 0.34%)</title><rect x="84.4595%" y="533" width="0.3378%" height="15" fill="rgb(248,177,22)" fg:x="250" fg:w="1"/><text x="84.7095%" y="543.50"></text></g><g><title>crossbeam_epoch::default::pin::{{closure}} (1 samples, 0.34%)</title><rect x="84.4595%" y="517" width="0.3378%" height="15" fill="rgb(215,211,37)" fg:x="250" fg:w="1"/><text x="84.7095%" y="527.50"></text></g><g><title>crossbeam_epoch::collector::LocalHandle::pin (1 samples, 0.34%)</title><rect x="84.4595%" y="501" width="0.3378%" height="15" fill="rgb(241,128,51)" fg:x="250" fg:w="1"/><text x="84.7095%" y="511.50"></text></g><g><title>crossbeam_epoch::internal::Local::pin (1 samples, 0.34%)</title><rect x="84.4595%" y="485" width="0.3378%" height="15" fill="rgb(227,165,31)" fg:x="250" fg:w="1"/><text x="84.7095%" y="495.50"></text></g><g><title>crossbeam_epoch::epoch::AtomicEpoch::compare_exchange (1 samples, 0.34%)</title><rect x="84.4595%" y="469" width="0.3378%" height="15" fill="rgb(228,167,24)" fg:x="250" fg:w="1"/><text x="84.7095%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1 samples, 0.34%)</title><rect x="84.4595%" y="453" width="0.3378%" height="15" fill="rgb(228,143,12)" fg:x="250" fg:w="1"/><text x="84.7095%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.34%)</title><rect x="84.4595%" y="437" width="0.3378%" height="15" fill="rgb(249,149,8)" fg:x="250" fg:w="1"/><text x="84.7095%" y="447.50"></text></g><g><title>rayon_core::sleep::Sleep::sleep (2 samples, 0.68%)</title><rect x="84.7973%" y="773" width="0.6757%" height="15" fill="rgb(243,35,44)" fg:x="251" fg:w="2"/><text x="85.0473%" y="783.50"></text></g><g><title>std::sync::poison::condvar::Condvar::wait (2 samples, 0.68%)</title><rect x="84.7973%" y="757" width="0.6757%" height="15" fill="rgb(246,89,9)" fg:x="251" fg:w="2"/><text x="85.0473%" y="767.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait (2 samples, 0.68%)</title><rect x="84.7973%" y="741" width="0.6757%" height="15" fill="rgb(233,213,13)" fg:x="251" fg:w="2"/><text x="85.0473%" y="751.50"></text></g><g><title>std::sys::sync::condvar::futex::Condvar::wait_optional_timeout (2 samples, 0.68%)</title><rect x="84.7973%" y="725" width="0.6757%" height="15" fill="rgb(233,141,41)" fg:x="251" fg:w="2"/><text x="85.0473%" y="735.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (2 samples, 0.68%)</title><rect x="84.7973%" y="709" width="0.6757%" height="15" fill="rgb(239,167,4)" fg:x="251" fg:w="2"/><text x="85.0473%" y="719.50"></text></g><g><title>syscall (2 samples, 0.68%)</title><rect x="84.7973%" y="693" width="0.6757%" height="15" fill="rgb(209,217,16)" fg:x="251" fg:w="2"/><text x="85.0473%" y="703.50"></text></g><g><title>rayon_core::sleep::Sleep::no_work_found (11 samples, 3.72%)</title><rect x="84.7973%" y="789" width="3.7162%" height="15" fill="rgb(219,88,35)" fg:x="251" fg:w="11"/><text x="85.0473%" y="799.50">rayo..</text></g><g><title>sched_yield (9 samples, 3.04%)</title><rect x="85.4730%" y="773" width="3.0405%" height="15" fill="rgb(220,193,23)" fg:x="253" fg:w="9"/><text x="85.7230%" y="783.50">sch..</text></g><g><title>__clone3 (263 samples, 88.85%)</title><rect x="0.0000%" y="1093" width="88.8514%" height="15" fill="rgb(230,90,52)" fg:x="0" fg:w="263"/><text x="0.2500%" y="1103.50">__clone3</text></g><g><title>start_thread (263 samples, 88.85%)</title><rect x="0.0000%" y="1077" width="88.8514%" height="15" fill="rgb(252,106,19)" fg:x="0" fg:w="263"/><text x="0.2500%" y="1087.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (220 samples, 74.32%)</title><rect x="14.5270%" y="1061" width="74.3243%" height="15" fill="rgb(206,74,20)" fg:x="43" fg:w="220"/><text x="14.7770%" y="1071.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (220 samples, 74.32%)</title><rect x="14.5270%" y="1045" width="74.3243%" height="15" fill="rgb(230,138,44)" fg:x="43" fg:w="220"/><text x="14.7770%" y="1055.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (220 samples, 74.32%)</title><rect x="14.5270%" y="1029" width="74.3243%" height="15" fill="rgb(235,182,43)" fg:x="43" fg:w="220"/><text x="14.7770%" y="1039.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (220 samples, 74.32%)</title><rect x="14.5270%" y="1013" width="74.3243%" height="15" fill="rgb(242,16,51)" fg:x="43" fg:w="220"/><text x="14.7770%" y="1023.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (220 samples, 74.32%)</title><rect x="14.5270%" y="997" width="74.3243%" height="15" fill="rgb(248,9,4)" fg:x="43" fg:w="220"/><text x="14.7770%" y="1007.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (220 samples, 74.32%)</title><rect x="14.5270%" y="981" width="74.3243%" height="15" fill="rgb(210,31,22)" fg:x="43" fg:w="220"/><text x="14.7770%" y="991.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (220 samples, 74.32%)</title><rect x="14.5270%" y="965" width="74.3243%" height="15" fill="rgb(239,54,39)" fg:x="43" fg:w="220"/><text x="14.7770%" y="975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (220 samples, 74.32%)</title><rect x="14.5270%" y="949" width="74.3243%" height="15" fill="rgb(230,99,41)" fg:x="43" fg:w="220"/><text x="14.7770%" y="959.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (220 samples, 74.32%)</title><rect x="14.5270%" y="933" width="74.3243%" height="15" fill="rgb(253,106,12)" fg:x="43" fg:w="220"/><text x="14.7770%" y="943.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (220 samples, 74.32%)</title><rect x="14.5270%" y="917" width="74.3243%" height="15" fill="rgb(213,46,41)" fg:x="43" fg:w="220"/><text x="14.7770%" y="927.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (220 samples, 74.32%)</title><rect x="14.5270%" y="901" width="74.3243%" height="15" fill="rgb(215,133,35)" fg:x="43" fg:w="220"/><text x="14.7770%" y="911.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}} (220 samples, 74.32%)</title><rect x="14.5270%" y="885" width="74.3243%" height="15" fill="rgb(213,28,5)" fg:x="43" fg:w="220"/><text x="14.7770%" y="895.50">&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}}</text></g><g><title>rayon_core::registry::ThreadBuilder::run (220 samples, 74.32%)</title><rect x="14.5270%" y="869" width="74.3243%" height="15" fill="rgb(215,77,49)" fg:x="43" fg:w="220"/><text x="14.7770%" y="879.50">rayon_core::registry::ThreadBuilder::run</text></g><g><title>rayon_core::registry::main_loop (220 samples, 74.32%)</title><rect x="14.5270%" y="853" width="74.3243%" height="15" fill="rgb(248,100,22)" fg:x="43" fg:w="220"/><text x="14.7770%" y="863.50">rayon_core::registry::main_loop</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_out_of_work (220 samples, 74.32%)</title><rect x="14.5270%" y="837" width="74.3243%" height="15" fill="rgb(208,67,9)" fg:x="43" fg:w="220"/><text x="14.7770%" y="847.50">rayon_core::registry::WorkerThread::wait_until_out_of_work</text></g><g><title>rayon_core::registry::WorkerThread::wait_until (220 samples, 74.32%)</title><rect x="14.5270%" y="821" width="74.3243%" height="15" fill="rgb(219,133,21)" fg:x="43" fg:w="220"/><text x="14.7770%" y="831.50">rayon_core::registry::WorkerThread::wait_until</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (220 samples, 74.32%)</title><rect x="14.5270%" y="805" width="74.3243%" height="15" fill="rgb(246,46,29)" fg:x="43" fg:w="220"/><text x="14.7770%" y="815.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>rayon_core::sleep::Sleep::work_found (1 samples, 0.34%)</title><rect x="88.5135%" y="789" width="0.3378%" height="15" fill="rgb(246,185,52)" fg:x="262" fg:w="1"/><text x="88.7635%" y="799.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (1 samples, 0.34%)</title><rect x="88.5135%" y="773" width="0.3378%" height="15" fill="rgb(252,136,11)" fg:x="262" fg:w="1"/><text x="88.7635%" y="783.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_specific_thread (1 samples, 0.34%)</title><rect x="88.5135%" y="757" width="0.3378%" height="15" fill="rgb(219,138,53)" fg:x="262" fg:w="1"/><text x="88.7635%" y="767.50"></text></g><g><title>syscall (1 samples, 0.34%)</title><rect x="88.5135%" y="741" width="0.3378%" height="15" fill="rgb(211,51,23)" fg:x="262" fg:w="1"/><text x="88.7635%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;evalexpr::context::HashMapContext&gt; (1 samples, 0.34%)</title><rect x="88.8514%" y="437" width="0.3378%" height="15" fill="rgb(247,221,28)" fg:x="263" fg:w="1"/><text x="89.1014%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,evalexpr::value::Value&gt;&gt; (1 samples, 0.34%)</title><rect x="88.8514%" y="421" width="0.3378%" height="15" fill="rgb(251,222,45)" fg:x="263" fg:w="1"/><text x="89.1014%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,evalexpr::value::Value,std::hash::random::RandomState&gt;&gt; (1 samples, 0.34%)</title><rect x="88.8514%" y="405" width="0.3378%" height="15" fill="rgb(217,162,53)" fg:x="263" fg:w="1"/><text x="89.1014%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,evalexpr::value::Value)&gt;&gt; (1 samples, 0.34%)</title><rect x="88.8514%" y="389" width="0.3378%" height="15" fill="rgb(229,93,14)" fg:x="263" fg:w="1"/><text x="89.1014%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.34%)</title><rect x="88.8514%" y="373" width="0.3378%" height="15" fill="rgb(209,67,49)" fg:x="263" fg:w="1"/><text x="89.1014%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 0.34%)</title><rect x="88.8514%" y="357" width="0.3378%" height="15" fill="rgb(213,87,29)" fg:x="263" fg:w="1"/><text x="89.1014%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (1 samples, 0.34%)</title><rect x="88.8514%" y="341" width="0.3378%" height="15" fill="rgb(205,151,52)" fg:x="263" fg:w="1"/><text x="89.1014%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.34%)</title><rect x="88.8514%" y="325" width="0.3378%" height="15" fill="rgb(253,215,39)" fg:x="263" fg:w="1"/><text x="89.1014%" y="335.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (1 samples, 0.34%)</title><rect x="88.8514%" y="309" width="0.3378%" height="15" fill="rgb(221,220,41)" fg:x="263" fg:w="1"/><text x="89.1014%" y="319.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.34%)</title><rect x="88.8514%" y="293" width="0.3378%" height="15" fill="rgb(218,133,21)" fg:x="263" fg:w="1"/><text x="89.1014%" y="303.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (1 samples, 0.34%)</title><rect x="88.8514%" y="277" width="0.3378%" height="15" fill="rgb(221,193,43)" fg:x="263" fg:w="1"/><text x="89.1014%" y="287.50"></text></g><g><title>control::criterion_benchmark::{{closure}}::{{closure}} (2 samples, 0.68%)</title><rect x="88.8514%" y="453" width="0.6757%" height="15" fill="rgb(240,128,52)" fg:x="263" fg:w="2"/><text x="89.1014%" y="463.50"></text></g><g><title>evalexpr::tree::Node&lt;NumericTypes&gt;::eval_number_with_context (1 samples, 0.34%)</title><rect x="89.1892%" y="437" width="0.3378%" height="15" fill="rgb(253,114,12)" fg:x="264" fg:w="1"/><text x="89.4392%" y="447.50"></text></g><g><title>evalexpr::tree::Node&lt;NumericTypes&gt;::eval_with_context (1 samples, 0.34%)</title><rect x="89.1892%" y="421" width="0.3378%" height="15" fill="rgb(215,223,47)" fg:x="264" fg:w="1"/><text x="89.4392%" y="431.50"></text></g><g><title>evalexpr::tree::Node&lt;NumericTypes&gt;::eval_with_context (1 samples, 0.34%)</title><rect x="89.1892%" y="405" width="0.3378%" height="15" fill="rgb(248,225,23)" fg:x="264" fg:w="1"/><text x="89.4392%" y="415.50"></text></g><g><title>evalexpr::tree::Node&lt;NumericTypes&gt;::eval_with_context (1 samples, 0.34%)</title><rect x="89.1892%" y="389" width="0.3378%" height="15" fill="rgb(250,108,0)" fg:x="264" fg:w="1"/><text x="89.4392%" y="399.50"></text></g><g><title>evalexpr::tree::Node&lt;NumericTypes&gt;::eval_with_context (1 samples, 0.34%)</title><rect x="89.1892%" y="373" width="0.3378%" height="15" fill="rgb(228,208,7)" fg:x="264" fg:w="1"/><text x="89.4392%" y="383.50"></text></g><g><title>evalexpr::tree::Node&lt;NumericTypes&gt;::eval_with_context (1 samples, 0.34%)</title><rect x="89.1892%" y="357" width="0.3378%" height="15" fill="rgb(244,45,10)" fg:x="264" fg:w="1"/><text x="89.4392%" y="367.50"></text></g><g><title>evalexpr::tree::Node&lt;NumericTypes&gt;::eval_with_context (1 samples, 0.34%)</title><rect x="89.1892%" y="341" width="0.3378%" height="15" fill="rgb(207,125,25)" fg:x="264" fg:w="1"/><text x="89.4392%" y="351.50"></text></g><g><title>evalexpr::operator::Operator&lt;NumericTypes&gt;::eval (1 samples, 0.34%)</title><rect x="89.1892%" y="325" width="0.3378%" height="15" fill="rgb(210,195,18)" fg:x="264" fg:w="1"/><text x="89.4392%" y="335.50"></text></g><g><title>evalexpr::error::expect_operator_argument_amount (1 samples, 0.34%)</title><rect x="89.1892%" y="309" width="0.3378%" height="15" fill="rgb(249,80,12)" fg:x="264" fg:w="1"/><text x="89.4392%" y="319.50"></text></g><g><title>&lt;zproto::ascii::packet::packet::Packet as core::convert::TryFrom&lt;&amp;[u8]&gt;&gt;::try_from (1 samples, 0.34%)</title><rect x="89.8649%" y="357" width="0.3378%" height="15" fill="rgb(221,65,9)" fg:x="266" fg:w="1"/><text x="90.1149%" y="367.50"></text></g><g><title>zproto::ascii::packet::visitor::Client&lt;V&gt;::parse (1 samples, 0.34%)</title><rect x="89.8649%" y="341" width="0.3378%" height="15" fill="rgb(235,49,36)" fg:x="266" fg:w="1"/><text x="90.1149%" y="351.50"></text></g><g><title>zproto::ascii::packet::visitor::Client&lt;V&gt;::parse_body (1 samples, 0.34%)</title><rect x="89.8649%" y="325" width="0.3378%" height="15" fill="rgb(225,32,20)" fg:x="266" fg:w="1"/><text x="90.1149%" y="335.50"></text></g><g><title>zproto::ascii::packet::visitor::Client&lt;V&gt;::word (1 samples, 0.34%)</title><rect x="89.8649%" y="309" width="0.3378%" height="15" fill="rgb(215,141,46)" fg:x="266" fg:w="1"/><text x="90.1149%" y="319.50"></text></g><g><title>zproto::ascii::packet::visitor::Client&lt;V&gt;::token_if (1 samples, 0.34%)</title><rect x="89.8649%" y="293" width="0.3378%" height="15" fill="rgb(250,160,47)" fg:x="266" fg:w="1"/><text x="90.1149%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (1 samples, 0.34%)</title><rect x="89.8649%" y="277" width="0.3378%" height="15" fill="rgb(216,222,40)" fg:x="266" fg:w="1"/><text x="90.1149%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.34%)</title><rect x="89.8649%" y="261" width="0.3378%" height="15" fill="rgb(234,217,39)" fg:x="266" fg:w="1"/><text x="90.1149%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.34%)</title><rect x="89.8649%" y="245" width="0.3378%" height="15" fill="rgb(207,178,40)" fg:x="266" fg:w="1"/><text x="90.1149%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.34%)</title><rect x="89.8649%" y="229" width="0.3378%" height="15" fill="rgb(221,136,13)" fg:x="266" fg:w="1"/><text x="90.1149%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (1 samples, 0.34%)</title><rect x="89.8649%" y="213" width="0.3378%" height="15" fill="rgb(249,199,10)" fg:x="266" fg:w="1"/><text x="90.1149%" y="223.50"></text></g><g><title>zproto::ascii::packet::visitor::Client&lt;V&gt;::token_if::{{closure}} (1 samples, 0.34%)</title><rect x="89.8649%" y="197" width="0.3378%" height="15" fill="rgb(249,222,13)" fg:x="266" fg:w="1"/><text x="90.1149%" y="207.50"></text></g><g><title>&lt;u8 as zproto::ascii::packet::AsciiExt&gt;::is_separator (1 samples, 0.34%)</title><rect x="89.8649%" y="181" width="0.3378%" height="15" fill="rgb(244,185,38)" fg:x="266" fg:w="1"/><text x="90.1149%" y="191.50"></text></g><g><title>nix::unistd::read (10 samples, 3.38%)</title><rect x="90.5405%" y="245" width="3.3784%" height="15" fill="rgb(236,202,9)" fg:x="268" fg:w="10"/><text x="90.7905%" y="255.50">nix..</text></g><g><title>__read (10 samples, 3.38%)</title><rect x="90.5405%" y="229" width="3.3784%" height="15" fill="rgb(250,229,37)" fg:x="268" fg:w="10"/><text x="90.7905%" y="239.50">__r..</text></g><g><title>lus_positioning_control::zaber::get_pos_zaber (24 samples, 8.11%)</title><rect x="89.5270%" y="453" width="8.1081%" height="15" fill="rgb(206,174,23)" fg:x="265" fg:w="24"/><text x="89.7770%" y="463.50">lus_positio..</text></g><g><title>&lt;zproto::ascii::port::iter::NResponses&lt;B,R,Tag,H&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 8.11%)</title><rect x="89.5270%" y="437" width="8.1081%" height="15" fill="rgb(211,33,43)" fg:x="265" fg:w="24"/><text x="89.7770%" y="447.50">&lt;zproto::as..</text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::receive_response (24 samples, 8.11%)</title><rect x="89.5270%" y="421" width="8.1081%" height="15" fill="rgb(245,58,50)" fg:x="265" fg:w="24"/><text x="89.7770%" y="431.50">zproto::asc..</text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::receive_response::{{closure}} (24 samples, 8.11%)</title><rect x="89.5270%" y="405" width="8.1081%" height="15" fill="rgb(244,68,36)" fg:x="265" fg:w="24"/><text x="89.7770%" y="415.50">zproto::asc..</text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::build_response (24 samples, 8.11%)</title><rect x="89.5270%" y="389" width="8.1081%" height="15" fill="rgb(232,229,15)" fg:x="265" fg:w="24"/><text x="89.7770%" y="399.50">zproto::asc..</text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::response_packet (24 samples, 8.11%)</title><rect x="89.5270%" y="373" width="8.1081%" height="15" fill="rgb(254,30,23)" fg:x="265" fg:w="24"/><text x="89.7770%" y="383.50">zproto::asc..</text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::read_packet_bytes (22 samples, 7.43%)</title><rect x="90.2027%" y="357" width="7.4324%" height="15" fill="rgb(235,160,14)" fg:x="267" fg:w="22"/><text x="90.4527%" y="367.50">zproto::as..</text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::read_packet_bytes::{{closure}} (22 samples, 7.43%)</title><rect x="90.2027%" y="341" width="7.4324%" height="15" fill="rgb(212,155,44)" fg:x="267" fg:w="22"/><text x="90.4527%" y="351.50">zproto::as..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 7.43%)</title><rect x="90.2027%" y="325" width="7.4324%" height="15" fill="rgb(226,2,50)" fg:x="267" fg:w="22"/><text x="90.4527%" y="335.50">&lt;std::io::..</text></g><g><title>&lt;R as std::io::SpecReadByte&gt;::spec_read_byte (22 samples, 7.43%)</title><rect x="90.2027%" y="309" width="7.4324%" height="15" fill="rgb(234,177,6)" fg:x="267" fg:w="22"/><text x="90.4527%" y="319.50">&lt;R as std:..</text></g><g><title>std::io::inlined_slow_read_byte (22 samples, 7.43%)</title><rect x="90.2027%" y="293" width="7.4324%" height="15" fill="rgb(217,24,9)" fg:x="267" fg:w="22"/><text x="90.4527%" y="303.50">std::io::i..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (21 samples, 7.09%)</title><rect x="90.5405%" y="277" width="7.0946%" height="15" fill="rgb(220,13,46)" fg:x="268" fg:w="21"/><text x="90.7905%" y="287.50">std::io::i..</text></g><g><title>&lt;serialport::posix::tty::TTYPort as std::io::Read&gt;::read (21 samples, 7.09%)</title><rect x="90.5405%" y="261" width="7.0946%" height="15" fill="rgb(239,221,27)" fg:x="268" fg:w="21"/><text x="90.7905%" y="271.50">&lt;serialpor..</text></g><g><title>serialport::posix::poll::wait_read_fd (11 samples, 3.72%)</title><rect x="93.9189%" y="245" width="3.7162%" height="15" fill="rgb(222,198,25)" fg:x="278" fg:w="11"/><text x="94.1689%" y="255.50">seri..</text></g><g><title>serialport::posix::poll::wait_fd (11 samples, 3.72%)</title><rect x="93.9189%" y="229" width="3.7162%" height="15" fill="rgb(211,99,13)" fg:x="278" fg:w="11"/><text x="94.1689%" y="239.50">seri..</text></g><g><title>serialport::posix::poll::poll_clamped (11 samples, 3.72%)</title><rect x="93.9189%" y="213" width="3.7162%" height="15" fill="rgb(232,111,31)" fg:x="278" fg:w="11"/><text x="94.1689%" y="223.50">seri..</text></g><g><title>nix::poll::ppoll (11 samples, 3.72%)</title><rect x="93.9189%" y="197" width="3.7162%" height="15" fill="rgb(245,82,37)" fg:x="278" fg:w="11"/><text x="94.1689%" y="207.50">nix:..</text></g><g><title>ppoll (11 samples, 3.72%)</title><rect x="93.9189%" y="181" width="3.7162%" height="15" fill="rgb(227,149,46)" fg:x="278" fg:w="11"/><text x="94.1689%" y="191.50">ppoll</text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::command (1 samples, 0.34%)</title><rect x="97.6351%" y="405" width="0.3378%" height="15" fill="rgb(218,36,50)" fg:x="289" fg:w="1"/><text x="97.8851%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.34%)</title><rect x="97.6351%" y="389" width="0.3378%" height="15" fill="rgb(226,80,48)" fg:x="289" fg:w="1"/><text x="97.8851%" y="399.50"></text></g><g><title>&lt;serialport::posix::tty::TTYPort as std::io::Write&gt;::write (1 samples, 0.34%)</title><rect x="97.6351%" y="373" width="0.3378%" height="15" fill="rgb(238,224,15)" fg:x="289" fg:w="1"/><text x="97.8851%" y="383.50"></text></g><g><title>nix::unistd::write (1 samples, 0.34%)</title><rect x="97.6351%" y="357" width="0.3378%" height="15" fill="rgb(241,136,10)" fg:x="289" fg:w="1"/><text x="97.8851%" y="367.50"></text></g><g><title>__libc_write (1 samples, 0.34%)</title><rect x="97.6351%" y="341" width="0.3378%" height="15" fill="rgb(208,32,45)" fg:x="289" fg:w="1"/><text x="97.8851%" y="351.50"></text></g><g><title>&lt;zproto::ascii::packet::packet::Packet as core::convert::TryFrom&lt;&amp;[u8]&gt;&gt;::try_from (1 samples, 0.34%)</title><rect x="97.9730%" y="341" width="0.3378%" height="15" fill="rgb(207,135,9)" fg:x="290" fg:w="1"/><text x="98.2230%" y="351.50"></text></g><g><title>zproto::ascii::packet::visitor::Client&lt;V&gt;::parse (1 samples, 0.34%)</title><rect x="97.9730%" y="325" width="0.3378%" height="15" fill="rgb(206,86,44)" fg:x="290" fg:w="1"/><text x="98.2230%" y="335.50"></text></g><g><title>&lt;zproto::ascii::packet::packet::Packet&lt;T&gt; as zproto::ascii::packet::visitor::Visitor&gt;::hashed_content (1 samples, 0.34%)</title><rect x="97.9730%" y="309" width="0.3378%" height="15" fill="rgb(245,177,15)" fg:x="290" fg:w="1"/><text x="98.2230%" y="319.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.34%)</title><rect x="97.9730%" y="293" width="0.3378%" height="15" fill="rgb(206,64,50)" fg:x="290" fg:w="1"/><text x="98.2230%" y="303.50"></text></g><g><title>alloc::boxed::convert::&lt;impl core::convert::From&lt;&amp;[T]&gt; for alloc::boxed::Box&lt;[T]&gt;&gt;::from (1 samples, 0.34%)</title><rect x="97.9730%" y="277" width="0.3378%" height="15" fill="rgb(234,36,40)" fg:x="290" fg:w="1"/><text x="98.2230%" y="287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;[T]&gt; as alloc::boxed::convert::BoxFromSlice&lt;T&gt;&gt;::from_slice (1 samples, 0.34%)</title><rect x="97.9730%" y="261" width="0.3378%" height="15" fill="rgb(213,64,8)" fg:x="290" fg:w="1"/><text x="98.2230%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.34%)</title><rect x="97.9730%" y="245" width="0.3378%" height="15" fill="rgb(210,75,36)" fg:x="290" fg:w="1"/><text x="98.2230%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner::with_capacity (1 samples, 0.34%)</title><rect x="97.9730%" y="229" width="0.3378%" height="15" fill="rgb(229,88,21)" fg:x="290" fg:w="1"/><text x="98.2230%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.34%)</title><rect x="97.9730%" y="213" width="0.3378%" height="15" fill="rgb(252,204,47)" fg:x="290" fg:w="1"/><text x="98.2230%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.34%)</title><rect x="97.9730%" y="197" width="0.3378%" height="15" fill="rgb(208,77,27)" fg:x="290" fg:w="1"/><text x="98.2230%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.34%)</title><rect x="97.9730%" y="181" width="0.3378%" height="15" fill="rgb(221,76,26)" fg:x="290" fg:w="1"/><text x="98.2230%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.34%)</title><rect x="97.9730%" y="165" width="0.3378%" height="15" fill="rgb(225,139,18)" fg:x="290" fg:w="1"/><text x="98.2230%" y="175.50"></text></g><g><title>malloc (1 samples, 0.34%)</title><rect x="97.9730%" y="149" width="0.3378%" height="15" fill="rgb(230,137,11)" fg:x="290" fg:w="1"/><text x="98.2230%" y="159.50"></text></g><g><title>lus_positioning_control::zaber::move_cross_zaber (4 samples, 1.35%)</title><rect x="97.6351%" y="453" width="1.3514%" height="15" fill="rgb(212,28,1)" fg:x="289" fg:w="4"/><text x="97.8851%" y="463.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::command_reply (4 samples, 1.35%)</title><rect x="97.6351%" y="437" width="1.3514%" height="15" fill="rgb(248,164,17)" fg:x="289" fg:w="4"/><text x="97.8851%" y="447.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::internal_command_reply (4 samples, 1.35%)</title><rect x="97.6351%" y="421" width="1.3514%" height="15" fill="rgb(222,171,42)" fg:x="289" fg:w="4"/><text x="97.8851%" y="431.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::receive_response (3 samples, 1.01%)</title><rect x="97.9730%" y="405" width="1.0135%" height="15" fill="rgb(243,84,45)" fg:x="290" fg:w="3"/><text x="98.2230%" y="415.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::receive_response::{{closure}} (3 samples, 1.01%)</title><rect x="97.9730%" y="389" width="1.0135%" height="15" fill="rgb(252,49,23)" fg:x="290" fg:w="3"/><text x="98.2230%" y="399.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::build_response (3 samples, 1.01%)</title><rect x="97.9730%" y="373" width="1.0135%" height="15" fill="rgb(215,19,7)" fg:x="290" fg:w="3"/><text x="98.2230%" y="383.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::response_packet (3 samples, 1.01%)</title><rect x="97.9730%" y="357" width="1.0135%" height="15" fill="rgb(238,81,41)" fg:x="290" fg:w="3"/><text x="98.2230%" y="367.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::read_packet_bytes (2 samples, 0.68%)</title><rect x="98.3108%" y="341" width="0.6757%" height="15" fill="rgb(210,199,37)" fg:x="291" fg:w="2"/><text x="98.5608%" y="351.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::read_packet_bytes::{{closure}} (2 samples, 0.68%)</title><rect x="98.3108%" y="325" width="0.6757%" height="15" fill="rgb(244,192,49)" fg:x="291" fg:w="2"/><text x="98.5608%" y="335.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.68%)</title><rect x="98.3108%" y="309" width="0.6757%" height="15" fill="rgb(226,211,11)" fg:x="291" fg:w="2"/><text x="98.5608%" y="319.50"></text></g><g><title>&lt;R as std::io::SpecReadByte&gt;::spec_read_byte (2 samples, 0.68%)</title><rect x="98.3108%" y="293" width="0.6757%" height="15" fill="rgb(236,162,54)" fg:x="291" fg:w="2"/><text x="98.5608%" y="303.50"></text></g><g><title>std::io::inlined_slow_read_byte (2 samples, 0.68%)</title><rect x="98.3108%" y="277" width="0.6757%" height="15" fill="rgb(220,229,9)" fg:x="291" fg:w="2"/><text x="98.5608%" y="287.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (2 samples, 0.68%)</title><rect x="98.3108%" y="261" width="0.6757%" height="15" fill="rgb(250,87,22)" fg:x="291" fg:w="2"/><text x="98.5608%" y="271.50"></text></g><g><title>&lt;serialport::posix::tty::TTYPort as std::io::Read&gt;::read (2 samples, 0.68%)</title><rect x="98.3108%" y="245" width="0.6757%" height="15" fill="rgb(239,43,17)" fg:x="291" fg:w="2"/><text x="98.5608%" y="255.50"></text></g><g><title>nix::unistd::read (2 samples, 0.68%)</title><rect x="98.3108%" y="229" width="0.6757%" height="15" fill="rgb(231,177,25)" fg:x="291" fg:w="2"/><text x="98.5608%" y="239.50"></text></g><g><title>__read (2 samples, 0.68%)</title><rect x="98.3108%" y="213" width="0.6757%" height="15" fill="rgb(219,179,1)" fg:x="291" fg:w="2"/><text x="98.5608%" y="223.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (32 samples, 10.81%)</title><rect x="88.8514%" y="725" width="10.8108%" height="15" fill="rgb(238,219,53)" fg:x="263" fg:w="32"/><text x="89.1014%" y="735.50">&lt;criterion::rout..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (32 samples, 10.81%)</title><rect x="88.8514%" y="709" width="10.8108%" height="15" fill="rgb(232,167,36)" fg:x="263" fg:w="32"/><text x="89.1014%" y="719.50">core::iter::trai..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (32 samples, 10.81%)</title><rect x="88.8514%" y="693" width="10.8108%" height="15" fill="rgb(244,19,51)" fg:x="263" fg:w="32"/><text x="89.1014%" y="703.50">&lt;alloc::vec::Vec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (32 samples, 10.81%)</title><rect x="88.8514%" y="677" width="10.8108%" height="15" fill="rgb(224,6,22)" fg:x="263" fg:w="32"/><text x="89.1014%" y="687.50">&lt;alloc::vec::Vec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (32 samples, 10.81%)</title><rect x="88.8514%" y="661" width="10.8108%" height="15" fill="rgb(224,145,5)" fg:x="263" fg:w="32"/><text x="89.1014%" y="671.50">&lt;alloc::vec::Vec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (32 samples, 10.81%)</title><rect x="88.8514%" y="645" width="10.8108%" height="15" fill="rgb(234,130,49)" fg:x="263" fg:w="32"/><text x="89.1014%" y="655.50">&lt;alloc::vec::Vec..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (32 samples, 10.81%)</title><rect x="88.8514%" y="629" width="10.8108%" height="15" fill="rgb(254,6,2)" fg:x="263" fg:w="32"/><text x="89.1014%" y="639.50">alloc::vec::Vec&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (32 samples, 10.81%)</title><rect x="88.8514%" y="613" width="10.8108%" height="15" fill="rgb(208,96,46)" fg:x="263" fg:w="32"/><text x="89.1014%" y="623.50">core::iter::trai..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (32 samples, 10.81%)</title><rect x="88.8514%" y="597" width="10.8108%" height="15" fill="rgb(239,3,39)" fg:x="263" fg:w="32"/><text x="89.1014%" y="607.50">&lt;core::iter::ada..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (32 samples, 10.81%)</title><rect x="88.8514%" y="581" width="10.8108%" height="15" fill="rgb(233,210,1)" fg:x="263" fg:w="32"/><text x="89.1014%" y="591.50">&lt;core::slice::it..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (32 samples, 10.81%)</title><rect x="88.8514%" y="565" width="10.8108%" height="15" fill="rgb(244,137,37)" fg:x="263" fg:w="32"/><text x="89.1014%" y="575.50">core::iter::adap..</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::{{closure}} (32 samples, 10.81%)</title><rect x="88.8514%" y="549" width="10.8108%" height="15" fill="rgb(240,136,2)" fg:x="263" fg:w="32"/><text x="89.1014%" y="559.50">&lt;criterion::rout..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (32 samples, 10.81%)</title><rect x="88.8514%" y="533" width="10.8108%" height="15" fill="rgb(239,18,37)" fg:x="263" fg:w="32"/><text x="89.1014%" y="543.50">criterion::bench..</text></g><g><title>control::criterion_benchmark::{{closure}} (32 samples, 10.81%)</title><rect x="88.8514%" y="517" width="10.8108%" height="15" fill="rgb(218,185,22)" fg:x="263" fg:w="32"/><text x="89.1014%" y="527.50">control::criteri..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (32 samples, 10.81%)</title><rect x="88.8514%" y="501" width="10.8108%" height="15" fill="rgb(225,218,4)" fg:x="263" fg:w="32"/><text x="89.1014%" y="511.50">criterion::bench..</text></g><g><title>control::criterion_benchmark::{{closure}}::{{closure}} (32 samples, 10.81%)</title><rect x="88.8514%" y="485" width="10.8108%" height="15" fill="rgb(230,182,32)" fg:x="263" fg:w="32"/><text x="89.1014%" y="495.50">control::criteri..</text></g><g><title>lus_positioning_control::control::compute_control (32 samples, 10.81%)</title><rect x="88.8514%" y="469" width="10.8108%" height="15" fill="rgb(242,56,43)" fg:x="263" fg:w="32"/><text x="89.1014%" y="479.50">lus_positioning_..</text></g><g><title>rayon::iter::ParallelIterator::collect (2 samples, 0.68%)</title><rect x="98.9865%" y="453" width="0.6757%" height="15" fill="rgb(233,99,24)" fg:x="293" fg:w="2"/><text x="99.2365%" y="463.50"></text></g><g><title>rayon::iter::from_par_iter::&lt;impl rayon::iter::FromParallelIterator&lt;T&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_par_iter (2 samples, 0.68%)</title><rect x="98.9865%" y="437" width="0.6757%" height="15" fill="rgb(234,209,42)" fg:x="293" fg:w="2"/><text x="99.2365%" y="447.50"></text></g><g><title>rayon::iter::from_par_iter::collect_extended (2 samples, 0.68%)</title><rect x="98.9865%" y="421" width="0.6757%" height="15" fill="rgb(227,7,12)" fg:x="293" fg:w="2"/><text x="99.2365%" y="431.50"></text></g><g><title>rayon::iter::collect::collect_with_consumer (2 samples, 0.68%)</title><rect x="98.9865%" y="405" width="0.6757%" height="15" fill="rgb(245,203,43)" fg:x="293" fg:w="2"/><text x="99.2365%" y="415.50"></text></g><g><title>rayon::iter::collect::special_extend::{{closure}} (2 samples, 0.68%)</title><rect x="98.9865%" y="389" width="0.6757%" height="15" fill="rgb(238,205,33)" fg:x="293" fg:w="2"/><text x="99.2365%" y="399.50"></text></g><g><title>&lt;rayon::iter::map::Map&lt;I,F&gt; as rayon::iter::ParallelIterator&gt;::drive_unindexed (2 samples, 0.68%)</title><rect x="98.9865%" y="373" width="0.6757%" height="15" fill="rgb(231,56,7)" fg:x="293" fg:w="2"/><text x="99.2365%" y="383.50"></text></g><g><title>&lt;rayon::iter::enumerate::Enumerate&lt;I&gt; as rayon::iter::ParallelIterator&gt;::drive_unindexed (2 samples, 0.68%)</title><rect x="98.9865%" y="357" width="0.6757%" height="15" fill="rgb(244,186,29)" fg:x="293" fg:w="2"/><text x="99.2365%" y="367.50"></text></g><g><title>rayon::iter::plumbing::bridge (2 samples, 0.68%)</title><rect x="98.9865%" y="341" width="0.6757%" height="15" fill="rgb(234,111,31)" fg:x="293" fg:w="2"/><text x="99.2365%" y="351.50"></text></g><g><title>&lt;rayon::iter::enumerate::Enumerate&lt;I&gt; as rayon::iter::IndexedParallelIterator&gt;::with_producer (2 samples, 0.68%)</title><rect x="98.9865%" y="325" width="0.6757%" height="15" fill="rgb(241,149,10)" fg:x="293" fg:w="2"/><text x="99.2365%" y="335.50"></text></g><g><title>&lt;rayon::slice::IterMut&lt;T&gt; as rayon::iter::IndexedParallelIterator&gt;::with_producer (2 samples, 0.68%)</title><rect x="98.9865%" y="309" width="0.6757%" height="15" fill="rgb(249,206,44)" fg:x="293" fg:w="2"/><text x="99.2365%" y="319.50"></text></g><g><title>&lt;&lt;rayon::iter::enumerate::Enumerate&lt;I&gt; as rayon::iter::IndexedParallelIterator&gt;::with_producer::Callback&lt;CB&gt; as rayon::iter::plumbing::ProducerCallback&lt;I&gt;&gt;::callback (2 samples, 0.68%)</title><rect x="98.9865%" y="293" width="0.6757%" height="15" fill="rgb(251,153,30)" fg:x="293" fg:w="2"/><text x="99.2365%" y="303.50"></text></g><g><title>&lt;rayon::iter::plumbing::bridge::Callback&lt;C&gt; as rayon::iter::plumbing::ProducerCallback&lt;I&gt;&gt;::callback (2 samples, 0.68%)</title><rect x="98.9865%" y="277" width="0.6757%" height="15" fill="rgb(239,152,38)" fg:x="293" fg:w="2"/><text x="99.2365%" y="287.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer (2 samples, 0.68%)</title><rect x="98.9865%" y="261" width="0.6757%" height="15" fill="rgb(249,139,47)" fg:x="293" fg:w="2"/><text x="99.2365%" y="271.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (2 samples, 0.68%)</title><rect x="98.9865%" y="245" width="0.6757%" height="15" fill="rgb(244,64,35)" fg:x="293" fg:w="2"/><text x="99.2365%" y="255.50"></text></g><g><title>rayon_core::join::join_context (2 samples, 0.68%)</title><rect x="98.9865%" y="229" width="0.6757%" height="15" fill="rgb(216,46,15)" fg:x="293" fg:w="2"/><text x="99.2365%" y="239.50"></text></g><g><title>rayon_core::registry::in_worker (2 samples, 0.68%)</title><rect x="98.9865%" y="213" width="0.6757%" height="15" fill="rgb(250,74,19)" fg:x="293" fg:w="2"/><text x="99.2365%" y="223.50"></text></g><g><title>rayon_core::registry::Registry::in_worker (2 samples, 0.68%)</title><rect x="98.9865%" y="197" width="0.6757%" height="15" fill="rgb(249,42,33)" fg:x="293" fg:w="2"/><text x="99.2365%" y="207.50"></text></g><g><title>rayon_core::registry::Registry::in_worker_cold (2 samples, 0.68%)</title><rect x="98.9865%" y="181" width="0.6757%" height="15" fill="rgb(242,149,17)" fg:x="293" fg:w="2"/><text x="99.2365%" y="191.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.68%)</title><rect x="98.9865%" y="165" width="0.6757%" height="15" fill="rgb(244,29,21)" fg:x="293" fg:w="2"/><text x="99.2365%" y="175.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.68%)</title><rect x="98.9865%" y="149" width="0.6757%" height="15" fill="rgb(220,130,37)" fg:x="293" fg:w="2"/><text x="99.2365%" y="159.50"></text></g><g><title>rayon_core::registry::Registry::in_worker_cold::{{closure}} (2 samples, 0.68%)</title><rect x="98.9865%" y="133" width="0.6757%" height="15" fill="rgb(211,67,2)" fg:x="293" fg:w="2"/><text x="99.2365%" y="143.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_any_threads (2 samples, 0.68%)</title><rect x="98.9865%" y="117" width="0.6757%" height="15" fill="rgb(235,68,52)" fg:x="293" fg:w="2"/><text x="99.2365%" y="127.50"></text></g><g><title>rayon_core::sleep::Sleep::wake_specific_thread (2 samples, 0.68%)</title><rect x="98.9865%" y="101" width="0.6757%" height="15" fill="rgb(246,142,3)" fg:x="293" fg:w="2"/><text x="99.2365%" y="111.50"></text></g><g><title>syscall (2 samples, 0.68%)</title><rect x="98.9865%" y="85" width="0.6757%" height="15" fill="rgb(241,25,7)" fg:x="293" fg:w="2"/><text x="99.2365%" y="95.50"></text></g><g><title>all (296 samples, 100%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(242,119,39)" fg:x="0" fg:w="296"/><text x="0.2500%" y="1135.50"></text></g><g><title>control-280c6fd (296 samples, 100.00%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(241,98,45)" fg:x="0" fg:w="296"/><text x="0.2500%" y="1119.50">control-280c6fd</text></g><g><title>_start (33 samples, 11.15%)</title><rect x="88.8514%" y="1093" width="11.1486%" height="15" fill="rgb(254,28,30)" fg:x="263" fg:w="33"/><text x="89.1014%" y="1103.50">_start</text></g><g><title>__libc_start_main_impl (33 samples, 11.15%)</title><rect x="88.8514%" y="1077" width="11.1486%" height="15" fill="rgb(241,142,54)" fg:x="263" fg:w="33"/><text x="89.1014%" y="1087.50">__libc_start_mai..</text></g><g><title>__libc_start_call_main (33 samples, 11.15%)</title><rect x="88.8514%" y="1061" width="11.1486%" height="15" fill="rgb(222,85,15)" fg:x="263" fg:w="33"/><text x="89.1014%" y="1071.50">__libc_start_cal..</text></g><g><title>main (33 samples, 11.15%)</title><rect x="88.8514%" y="1045" width="11.1486%" height="15" fill="rgb(210,85,47)" fg:x="263" fg:w="33"/><text x="89.1014%" y="1055.50">main</text></g><g><title>std::rt::lang_start_internal (33 samples, 11.15%)</title><rect x="88.8514%" y="1029" width="11.1486%" height="15" fill="rgb(224,206,25)" fg:x="263" fg:w="33"/><text x="89.1014%" y="1039.50">std::rt::lang_st..</text></g><g><title>std::panic::catch_unwind (33 samples, 11.15%)</title><rect x="88.8514%" y="1013" width="11.1486%" height="15" fill="rgb(243,201,19)" fg:x="263" fg:w="33"/><text x="89.1014%" y="1023.50">std::panic::catc..</text></g><g><title>std::panicking::try (33 samples, 11.15%)</title><rect x="88.8514%" y="997" width="11.1486%" height="15" fill="rgb(236,59,4)" fg:x="263" fg:w="33"/><text x="89.1014%" y="1007.50">std::panicking::..</text></g><g><title>std::panicking::try::do_call (33 samples, 11.15%)</title><rect x="88.8514%" y="981" width="11.1486%" height="15" fill="rgb(254,179,45)" fg:x="263" fg:w="33"/><text x="89.1014%" y="991.50">std::panicking::..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (33 samples, 11.15%)</title><rect x="88.8514%" y="965" width="11.1486%" height="15" fill="rgb(226,14,10)" fg:x="263" fg:w="33"/><text x="89.1014%" y="975.50">std::rt::lang_st..</text></g><g><title>std::panic::catch_unwind (33 samples, 11.15%)</title><rect x="88.8514%" y="949" width="11.1486%" height="15" fill="rgb(244,27,41)" fg:x="263" fg:w="33"/><text x="89.1014%" y="959.50">std::panic::catc..</text></g><g><title>std::panicking::try (33 samples, 11.15%)</title><rect x="88.8514%" y="933" width="11.1486%" height="15" fill="rgb(235,35,32)" fg:x="263" fg:w="33"/><text x="89.1014%" y="943.50">std::panicking::..</text></g><g><title>std::panicking::try::do_call (33 samples, 11.15%)</title><rect x="88.8514%" y="917" width="11.1486%" height="15" fill="rgb(218,68,31)" fg:x="263" fg:w="33"/><text x="89.1014%" y="927.50">std::panicking::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (33 samples, 11.15%)</title><rect x="88.8514%" y="901" width="11.1486%" height="15" fill="rgb(207,120,37)" fg:x="263" fg:w="33"/><text x="89.1014%" y="911.50">core::ops::funct..</text></g><g><title>std::rt::lang_start::{{closure}} (33 samples, 11.15%)</title><rect x="88.8514%" y="885" width="11.1486%" height="15" fill="rgb(227,98,0)" fg:x="263" fg:w="33"/><text x="89.1014%" y="895.50">std::rt::lang_st..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (33 samples, 11.15%)</title><rect x="88.8514%" y="869" width="11.1486%" height="15" fill="rgb(207,7,3)" fg:x="263" fg:w="33"/><text x="89.1014%" y="879.50">std::sys::backtr..</text></g><g><title>core::ops::function::FnOnce::call_once (33 samples, 11.15%)</title><rect x="88.8514%" y="853" width="11.1486%" height="15" fill="rgb(206,98,19)" fg:x="263" fg:w="33"/><text x="89.1014%" y="863.50">core::ops::funct..</text></g><g><title>control::main (33 samples, 11.15%)</title><rect x="88.8514%" y="837" width="11.1486%" height="15" fill="rgb(217,5,26)" fg:x="263" fg:w="33"/><text x="89.1014%" y="847.50">control::main</text></g><g><title>control::benches (33 samples, 11.15%)</title><rect x="88.8514%" y="821" width="11.1486%" height="15" fill="rgb(235,190,38)" fg:x="263" fg:w="33"/><text x="89.1014%" y="831.50">control::benches</text></g><g><title>control::criterion_benchmark (33 samples, 11.15%)</title><rect x="88.8514%" y="805" width="11.1486%" height="15" fill="rgb(247,86,24)" fg:x="263" fg:w="33"/><text x="89.1014%" y="815.50">control::criteri..</text></g><g><title>criterion::Criterion&lt;M&gt;::bench_function (33 samples, 11.15%)</title><rect x="88.8514%" y="789" width="11.1486%" height="15" fill="rgb(205,101,16)" fg:x="263" fg:w="33"/><text x="89.1014%" y="799.50">criterion::Crite..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (33 samples, 11.15%)</title><rect x="88.8514%" y="773" width="11.1486%" height="15" fill="rgb(246,168,33)" fg:x="263" fg:w="33"/><text x="89.1014%" y="783.50">criterion::bench..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (33 samples, 11.15%)</title><rect x="88.8514%" y="757" width="11.1486%" height="15" fill="rgb(231,114,1)" fg:x="263" fg:w="33"/><text x="89.1014%" y="767.50">criterion::bench..</text></g><g><title>criterion::routine::Routine::profile (33 samples, 11.15%)</title><rect x="88.8514%" y="741" width="11.1486%" height="15" fill="rgb(207,184,53)" fg:x="263" fg:w="33"/><text x="89.1014%" y="751.50">criterion::routi..</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (1 samples, 0.34%)</title><rect x="99.6622%" y="725" width="0.3378%" height="15" fill="rgb(224,95,51)" fg:x="295" fg:w="1"/><text x="99.9122%" y="735.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (1 samples, 0.34%)</title><rect x="99.6622%" y="709" width="0.3378%" height="15" fill="rgb(212,188,45)" fg:x="295" fg:w="1"/><text x="99.9122%" y="719.50"></text></g><g><title>control::criterion_benchmark::{{closure}} (1 samples, 0.34%)</title><rect x="99.6622%" y="693" width="0.3378%" height="15" fill="rgb(223,154,38)" fg:x="295" fg:w="1"/><text x="99.9122%" y="703.50"></text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (1 samples, 0.34%)</title><rect x="99.6622%" y="677" width="0.3378%" height="15" fill="rgb(251,22,52)" fg:x="295" fg:w="1"/><text x="99.9122%" y="687.50"></text></g><g><title>control::criterion_benchmark::{{closure}}::{{closure}} (1 samples, 0.34%)</title><rect x="99.6622%" y="661" width="0.3378%" height="15" fill="rgb(229,209,22)" fg:x="295" fg:w="1"/><text x="99.9122%" y="671.50"></text></g><g><title>lus_positioning_control::control::compute_control (1 samples, 0.34%)</title><rect x="99.6622%" y="645" width="0.3378%" height="15" fill="rgb(234,138,34)" fg:x="295" fg:w="1"/><text x="99.9122%" y="655.50"></text></g><g><title>lus_positioning_control::zaber::get_pos_zaber (1 samples, 0.34%)</title><rect x="99.6622%" y="629" width="0.3378%" height="15" fill="rgb(212,95,11)" fg:x="295" fg:w="1"/><text x="99.9122%" y="639.50"></text></g><g><title>&lt;zproto::ascii::port::iter::NResponses&lt;B,R,Tag,H&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.34%)</title><rect x="99.6622%" y="613" width="0.3378%" height="15" fill="rgb(240,179,47)" fg:x="295" fg:w="1"/><text x="99.9122%" y="623.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::receive_response (1 samples, 0.34%)</title><rect x="99.6622%" y="597" width="0.3378%" height="15" fill="rgb(240,163,11)" fg:x="295" fg:w="1"/><text x="99.9122%" y="607.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::receive_response::{{closure}} (1 samples, 0.34%)</title><rect x="99.6622%" y="581" width="0.3378%" height="15" fill="rgb(236,37,12)" fg:x="295" fg:w="1"/><text x="99.9122%" y="591.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::build_response (1 samples, 0.34%)</title><rect x="99.6622%" y="565" width="0.3378%" height="15" fill="rgb(232,164,16)" fg:x="295" fg:w="1"/><text x="99.9122%" y="575.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::response_packet (1 samples, 0.34%)</title><rect x="99.6622%" y="549" width="0.3378%" height="15" fill="rgb(244,205,15)" fg:x="295" fg:w="1"/><text x="99.9122%" y="559.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::read_packet_bytes (1 samples, 0.34%)</title><rect x="99.6622%" y="533" width="0.3378%" height="15" fill="rgb(223,117,47)" fg:x="295" fg:w="1"/><text x="99.9122%" y="543.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::read_packet_bytes::{{closure}} (1 samples, 0.34%)</title><rect x="99.6622%" y="517" width="0.3378%" height="15" fill="rgb(244,107,35)" fg:x="295" fg:w="1"/><text x="99.9122%" y="527.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.34%)</title><rect x="99.6622%" y="501" width="0.3378%" height="15" fill="rgb(205,140,8)" fg:x="295" fg:w="1"/><text x="99.9122%" y="511.50"></text></g><g><title>&lt;R as std::io::SpecReadByte&gt;::spec_read_byte (1 samples, 0.34%)</title><rect x="99.6622%" y="485" width="0.3378%" height="15" fill="rgb(228,84,46)" fg:x="295" fg:w="1"/><text x="99.9122%" y="495.50"></text></g><g><title>std::io::inlined_slow_read_byte (1 samples, 0.34%)</title><rect x="99.6622%" y="469" width="0.3378%" height="15" fill="rgb(254,188,9)" fg:x="295" fg:w="1"/><text x="99.9122%" y="479.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (1 samples, 0.34%)</title><rect x="99.6622%" y="453" width="0.3378%" height="15" fill="rgb(206,112,54)" fg:x="295" fg:w="1"/><text x="99.9122%" y="463.50"></text></g><g><title>&lt;serialport::posix::tty::TTYPort as std::io::Read&gt;::read (1 samples, 0.34%)</title><rect x="99.6622%" y="437" width="0.3378%" height="15" fill="rgb(216,84,49)" fg:x="295" fg:w="1"/><text x="99.9122%" y="447.50"></text></g><g><title>serialport::posix::poll::wait_read_fd (1 samples, 0.34%)</title><rect x="99.6622%" y="421" width="0.3378%" height="15" fill="rgb(214,194,35)" fg:x="295" fg:w="1"/><text x="99.9122%" y="431.50"></text></g><g><title>serialport::posix::poll::wait_fd (1 samples, 0.34%)</title><rect x="99.6622%" y="405" width="0.3378%" height="15" fill="rgb(249,28,3)" fg:x="295" fg:w="1"/><text x="99.9122%" y="415.50"></text></g><g><title>serialport::posix::poll::poll_clamped (1 samples, 0.34%)</title><rect x="99.6622%" y="389" width="0.3378%" height="15" fill="rgb(222,56,52)" fg:x="295" fg:w="1"/><text x="99.9122%" y="399.50"></text></g><g><title>nix::poll::ppoll (1 samples, 0.34%)</title><rect x="99.6622%" y="373" width="0.3378%" height="15" fill="rgb(245,217,50)" fg:x="295" fg:w="1"/><text x="99.9122%" y="383.50"></text></g><g><title>ppoll (1 samples, 0.34%)</title><rect x="99.6622%" y="357" width="0.3378%" height="15" fill="rgb(213,201,24)" fg:x="295" fg:w="1"/><text x="99.9122%" y="367.50"></text></g></svg></svg>