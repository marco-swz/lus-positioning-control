<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1094" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1077.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1077.00"> </text><svg id="frames" x="10" width="1180" total_samples="105"><g><title>get_next_timeout (1 samples, 0.95%)</title><rect x="0.0000%" y="933" width="0.9524%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="943.50"></text></g><g><title>libusb_get_next_timeout (1 samples, 0.95%)</title><rect x="0.0000%" y="917" width="0.9524%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="927.50"></text></g><g><title>op_clock_gettime (1 samples, 0.95%)</title><rect x="0.0000%" y="901" width="0.9524%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="911.50"></text></g><g><title>__clock_gettime_2 (1 samples, 0.95%)</title><rect x="0.0000%" y="885" width="0.9524%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="895.50"></text></g><g><title>__ioctl (8 samples, 7.62%)</title><rect x="2.8571%" y="885" width="7.6190%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="8"/><text x="3.1071%" y="895.50">__ioctl</text></g><g><title>usbi_handle_transfer_completion (3 samples, 2.86%)</title><rect x="11.4286%" y="869" width="2.8571%" height="15" fill="rgb(232,128,0)" fg:x="12" fg:w="3"/><text x="11.6786%" y="879.50">us..</text></g><g><title>InRequestCompletion (3 samples, 2.86%)</title><rect x="11.4286%" y="853" width="2.8571%" height="15" fill="rgb(207,160,47)" fg:x="12" fg:w="3"/><text x="11.6786%" y="863.50">In..</text></g><g><title>EventSet (3 samples, 2.86%)</title><rect x="11.4286%" y="837" width="2.8571%" height="15" fill="rgb(228,23,34)" fg:x="12" fg:w="3"/><text x="11.6786%" y="847.50">Ev..</text></g><g><title>pthread_cond_broadcast@@GLIBC_2.3.2 (3 samples, 2.86%)</title><rect x="11.4286%" y="821" width="2.8571%" height="15" fill="rgb(218,30,26)" fg:x="12" fg:w="3"/><text x="11.6786%" y="831.50">pt..</text></g><g><title>op_handle_events (15 samples, 14.29%)</title><rect x="0.9524%" y="917" width="14.2857%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="15"/><text x="1.2024%" y="927.50">op_handle_events</text></g><g><title>reap_for_handle (14 samples, 13.33%)</title><rect x="1.9048%" y="901" width="13.3333%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="14"/><text x="2.1548%" y="911.50">reap_for_handle</text></g><g><title>handle_bulk_completion (5 samples, 4.76%)</title><rect x="10.4762%" y="885" width="4.7619%" height="15" fill="rgb(240,193,28)" fg:x="11" fg:w="5"/><text x="10.7262%" y="895.50">handle..</text></g><g><title>usbi_mutex_unlock (1 samples, 0.95%)</title><rect x="14.2857%" y="869" width="0.9524%" height="15" fill="rgb(216,20,37)" fg:x="15" fg:w="1"/><text x="14.5357%" y="879.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (1 samples, 0.95%)</title><rect x="14.2857%" y="853" width="0.9524%" height="15" fill="rgb(206,188,39)" fg:x="15" fg:w="1"/><text x="14.5357%" y="863.50"></text></g><g><title>handle_events (25 samples, 23.81%)</title><rect x="0.9524%" y="933" width="23.8095%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="25"/><text x="1.2024%" y="943.50">handle_events</text></g><g><title>poll (10 samples, 9.52%)</title><rect x="15.2381%" y="917" width="9.5238%" height="15" fill="rgb(231,73,38)" fg:x="16" fg:w="10"/><text x="15.4881%" y="927.50">poll</text></g><g><title>libusb_try_lock_events (1 samples, 0.95%)</title><rect x="24.7619%" y="933" width="0.9524%" height="15" fill="rgb(225,20,46)" fg:x="26" fg:w="1"/><text x="25.0119%" y="943.50"></text></g><g><title>usbi_mutex_unlock (1 samples, 0.95%)</title><rect x="24.7619%" y="917" width="0.9524%" height="15" fill="rgb(210,31,41)" fg:x="26" fg:w="1"/><text x="25.0119%" y="927.50"></text></g><g><title>poll_async_libusb (30 samples, 28.57%)</title><rect x="0.0000%" y="981" width="28.5714%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="30"/><text x="0.2500%" y="991.50">poll_async_libusb</text></g><g><title>libusb_handle_events_timeout (30 samples, 28.57%)</title><rect x="0.0000%" y="965" width="28.5714%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="30"/><text x="0.2500%" y="975.50">libusb_handle_events_timeout</text></g><g><title>libusb_handle_events_timeout_completed (30 samples, 28.57%)</title><rect x="0.0000%" y="949" width="28.5714%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="30"/><text x="0.2500%" y="959.50">libusb_handle_events_timeout_completed</text></g><g><title>libusb_unlock_events (3 samples, 2.86%)</title><rect x="25.7143%" y="933" width="2.8571%" height="15" fill="rgb(235,183,28)" fg:x="27" fg:w="3"/><text x="25.9643%" y="943.50">li..</text></g><g><title>usbi_cond_broadcast (3 samples, 2.86%)</title><rect x="25.7143%" y="917" width="2.8571%" height="15" fill="rgb(221,5,38)" fg:x="27" fg:w="3"/><text x="25.9643%" y="927.50">us..</text></g><g><title>pthread_cond_broadcast@@GLIBC_2.3.2 (3 samples, 2.86%)</title><rect x="25.7143%" y="901" width="2.8571%" height="15" fill="rgb(247,18,42)" fg:x="27" fg:w="3"/><text x="25.9643%" y="911.50">pt..</text></g><g><title>EventWait (4 samples, 3.81%)</title><rect x="28.5714%" y="965" width="3.8095%" height="15" fill="rgb(241,131,45)" fg:x="30" fg:w="4"/><text x="28.8214%" y="975.50">Even..</text></g><g><title>__GI___pthread_cond_timedwait (4 samples, 3.81%)</title><rect x="28.5714%" y="949" width="3.8095%" height="15" fill="rgb(249,31,29)" fg:x="30" fg:w="4"/><text x="28.8214%" y="959.50">__GI..</text></g><g><title>__futex_abstimed_wait_common (4 samples, 3.81%)</title><rect x="28.5714%" y="933" width="3.8095%" height="15" fill="rgb(225,111,53)" fg:x="30" fg:w="4"/><text x="28.8214%" y="943.50">__fu..</text></g><g><title>processor_thread (6 samples, 5.71%)</title><rect x="28.5714%" y="981" width="5.7143%" height="15" fill="rgb(238,160,17)" fg:x="30" fg:w="6"/><text x="28.8214%" y="991.50">process..</text></g><g><title>ProcessBulkInData (2 samples, 1.90%)</title><rect x="32.3810%" y="965" width="1.9048%" height="15" fill="rgb(214,148,48)" fg:x="34" fg:w="2"/><text x="32.6310%" y="975.50">P..</text></g><g><title>usleep (2 samples, 1.90%)</title><rect x="32.3810%" y="949" width="1.9048%" height="15" fill="rgb(232,36,49)" fg:x="34" fg:w="2"/><text x="32.6310%" y="959.50">u..</text></g><g><title>nanosleep (1 samples, 0.95%)</title><rect x="33.3333%" y="933" width="0.9524%" height="15" fill="rgb(209,103,24)" fg:x="35" fg:w="1"/><text x="33.5833%" y="943.50"></text></g><g><title>clock_nanosleep@@GLIBC_2.17 (1 samples, 0.95%)</title><rect x="33.3333%" y="917" width="0.9524%" height="15" fill="rgb(229,88,8)" fg:x="35" fg:w="1"/><text x="33.5833%" y="927.50"></text></g><g><title>EventWait (1 samples, 0.95%)</title><rect x="34.2857%" y="965" width="0.9524%" height="15" fill="rgb(213,181,19)" fg:x="36" fg:w="1"/><text x="34.5357%" y="975.50"></text></g><g><title>__GI___pthread_cond_timedwait (1 samples, 0.95%)</title><rect x="34.2857%" y="949" width="0.9524%" height="15" fill="rgb(254,191,54)" fg:x="36" fg:w="1"/><text x="34.5357%" y="959.50"></text></g><g><title>__futex_abstimed_wait_common (1 samples, 0.95%)</title><rect x="34.2857%" y="933" width="0.9524%" height="15" fill="rgb(241,83,37)" fg:x="36" fg:w="1"/><text x="34.5357%" y="943.50"></text></g><g><title>__GI___clone3 (42 samples, 40.00%)</title><rect x="0.0000%" y="1013" width="40.0000%" height="15" fill="rgb(233,36,39)" fg:x="0" fg:w="42"/><text x="0.2500%" y="1023.50">__GI___clone3</text></g><g><title>start_thread (42 samples, 40.00%)</title><rect x="0.0000%" y="997" width="40.0000%" height="15" fill="rgb(226,3,54)" fg:x="0" fg:w="42"/><text x="0.2500%" y="1007.50">start_thread</text></g><g><title>reader_thread (6 samples, 5.71%)</title><rect x="34.2857%" y="981" width="5.7143%" height="15" fill="rgb(245,192,40)" fg:x="36" fg:w="6"/><text x="34.5357%" y="991.50">reader_..</text></g><g><title>InRequest (5 samples, 4.76%)</title><rect x="35.2381%" y="965" width="4.7619%" height="15" fill="rgb(238,167,29)" fg:x="37" fg:w="5"/><text x="35.4881%" y="975.50">InRequ..</text></g><g><title>libusb_submit_transfer (5 samples, 4.76%)</title><rect x="35.2381%" y="949" width="4.7619%" height="15" fill="rgb(232,182,51)" fg:x="37" fg:w="5"/><text x="35.4881%" y="959.50">libusb..</text></g><g><title>op_submit_transfer (5 samples, 4.76%)</title><rect x="35.2381%" y="933" width="4.7619%" height="15" fill="rgb(231,60,39)" fg:x="37" fg:w="5"/><text x="35.4881%" y="943.50">op_sub..</text></g><g><title>submit_bulk_transfer (5 samples, 4.76%)</title><rect x="35.2381%" y="917" width="4.7619%" height="15" fill="rgb(208,69,12)" fg:x="37" fg:w="5"/><text x="35.4881%" y="927.50">submit..</text></g><g><title>__ioctl (5 samples, 4.76%)</title><rect x="35.2381%" y="901" width="4.7619%" height="15" fill="rgb(235,93,37)" fg:x="37" fg:w="5"/><text x="35.4881%" y="911.50">__ioctl</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.95%)</title><rect x="41.9048%" y="261" width="0.9524%" height="15" fill="rgb(213,116,39)" fg:x="44" fg:w="1"/><text x="42.1548%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.95%)</title><rect x="41.9048%" y="245" width="0.9524%" height="15" fill="rgb(222,207,29)" fg:x="44" fg:w="1"/><text x="42.1548%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.95%)</title><rect x="41.9048%" y="229" width="0.9524%" height="15" fill="rgb(206,96,30)" fg:x="44" fg:w="1"/><text x="42.1548%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1 samples, 0.95%)</title><rect x="41.9048%" y="213" width="0.9524%" height="15" fill="rgb(218,138,4)" fg:x="44" fg:w="1"/><text x="42.1548%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.95%)</title><rect x="41.9048%" y="197" width="0.9524%" height="15" fill="rgb(250,191,14)" fg:x="44" fg:w="1"/><text x="42.1548%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.95%)</title><rect x="41.9048%" y="181" width="0.9524%" height="15" fill="rgb(239,60,40)" fg:x="44" fg:w="1"/><text x="42.1548%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.95%)</title><rect x="41.9048%" y="165" width="0.9524%" height="15" fill="rgb(206,27,48)" fg:x="44" fg:w="1"/><text x="42.1548%" y="175.50"></text></g><g><title>_int_free (1 samples, 0.95%)</title><rect x="41.9048%" y="149" width="0.9524%" height="15" fill="rgb(225,35,8)" fg:x="44" fg:w="1"/><text x="42.1548%" y="159.50"></text></g><g><title>&lt;lus_positioning_control::zaber::TrackingBackend&lt;T,U&gt; as lus_positioning_control::control::Backend&gt;::get_pos (4 samples, 3.81%)</title><rect x="40.9524%" y="373" width="3.8095%" height="15" fill="rgb(250,213,24)" fg:x="43" fg:w="4"/><text x="41.2024%" y="383.50">&lt;lus..</text></g><g><title>lus_positioning_control::zaber::get_pos_zaber (4 samples, 3.81%)</title><rect x="40.9524%" y="357" width="3.8095%" height="15" fill="rgb(247,123,22)" fg:x="43" fg:w="4"/><text x="41.2024%" y="367.50">lus_..</text></g><g><title>&lt;zproto::ascii::port::iter::NResponses&lt;B,R,Tag,H&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 3.81%)</title><rect x="40.9524%" y="341" width="3.8095%" height="15" fill="rgb(231,138,38)" fg:x="43" fg:w="4"/><text x="41.2024%" y="351.50">&lt;zpr..</text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::receive_response (3 samples, 2.86%)</title><rect x="41.9048%" y="325" width="2.8571%" height="15" fill="rgb(231,145,46)" fg:x="44" fg:w="3"/><text x="42.1548%" y="335.50">zp..</text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::receive_response::{{closure}} (3 samples, 2.86%)</title><rect x="41.9048%" y="309" width="2.8571%" height="15" fill="rgb(251,118,11)" fg:x="44" fg:w="3"/><text x="42.1548%" y="319.50">zp..</text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::build_response (3 samples, 2.86%)</title><rect x="41.9048%" y="293" width="2.8571%" height="15" fill="rgb(217,147,25)" fg:x="44" fg:w="3"/><text x="42.1548%" y="303.50">zp..</text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::response_packet (3 samples, 2.86%)</title><rect x="41.9048%" y="277" width="2.8571%" height="15" fill="rgb(247,81,37)" fg:x="44" fg:w="3"/><text x="42.1548%" y="287.50">zp..</text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::read_packet_bytes (2 samples, 1.90%)</title><rect x="42.8571%" y="261" width="1.9048%" height="15" fill="rgb(209,12,38)" fg:x="45" fg:w="2"/><text x="43.1071%" y="271.50">z..</text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::read_packet_bytes::{{closure}} (2 samples, 1.90%)</title><rect x="42.8571%" y="245" width="1.9048%" height="15" fill="rgb(227,1,9)" fg:x="45" fg:w="2"/><text x="43.1071%" y="255.50">z..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.90%)</title><rect x="42.8571%" y="229" width="1.9048%" height="15" fill="rgb(248,47,43)" fg:x="45" fg:w="2"/><text x="43.1071%" y="239.50">&lt;..</text></g><g><title>&lt;R as std::io::SpecReadByte&gt;::spec_read_byte (2 samples, 1.90%)</title><rect x="42.8571%" y="213" width="1.9048%" height="15" fill="rgb(221,10,30)" fg:x="45" fg:w="2"/><text x="43.1071%" y="223.50">&lt;..</text></g><g><title>std::io::inlined_slow_read_byte (2 samples, 1.90%)</title><rect x="42.8571%" y="197" width="1.9048%" height="15" fill="rgb(210,229,1)" fg:x="45" fg:w="2"/><text x="43.1071%" y="207.50">s..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (2 samples, 1.90%)</title><rect x="42.8571%" y="181" width="1.9048%" height="15" fill="rgb(222,148,37)" fg:x="45" fg:w="2"/><text x="43.1071%" y="191.50">s..</text></g><g><title>&lt;serialport::posix::tty::TTYPort as std::io::Read&gt;::read (2 samples, 1.90%)</title><rect x="42.8571%" y="165" width="1.9048%" height="15" fill="rgb(234,67,33)" fg:x="45" fg:w="2"/><text x="43.1071%" y="175.50">&lt;..</text></g><g><title>serialport::posix::poll::wait_read_fd (2 samples, 1.90%)</title><rect x="42.8571%" y="149" width="1.9048%" height="15" fill="rgb(247,98,35)" fg:x="45" fg:w="2"/><text x="43.1071%" y="159.50">s..</text></g><g><title>serialport::posix::poll::wait_fd (2 samples, 1.90%)</title><rect x="42.8571%" y="133" width="1.9048%" height="15" fill="rgb(247,138,52)" fg:x="45" fg:w="2"/><text x="43.1071%" y="143.50">s..</text></g><g><title>serialport::posix::poll::poll_clamped (2 samples, 1.90%)</title><rect x="42.8571%" y="117" width="1.9048%" height="15" fill="rgb(213,79,30)" fg:x="45" fg:w="2"/><text x="43.1071%" y="127.50">s..</text></g><g><title>nix::poll::ppoll (2 samples, 1.90%)</title><rect x="42.8571%" y="101" width="1.9048%" height="15" fill="rgb(246,177,23)" fg:x="45" fg:w="2"/><text x="43.1071%" y="111.50">n..</text></g><g><title>ppoll (2 samples, 1.90%)</title><rect x="42.8571%" y="85" width="1.9048%" height="15" fill="rgb(230,62,27)" fg:x="45" fg:w="2"/><text x="43.1071%" y="95.50">p..</text></g><g><title>&lt;libftd2xx::Ft232h as ftdi_mpsse::MpsseCmdExecutor&gt;::recv (30 samples, 28.57%)</title><rect x="44.7619%" y="245" width="28.5714%" height="15" fill="rgb(216,154,8)" fg:x="47" fg:w="30"/><text x="45.0119%" y="255.50">&lt;libftd2xx::Ft232h as ftdi_mpsse::MpsseCmdExec..</text></g><g><title>libftd2xx::FtdiCommon::read_all (30 samples, 28.57%)</title><rect x="44.7619%" y="229" width="28.5714%" height="15" fill="rgb(244,35,45)" fg:x="47" fg:w="30"/><text x="45.0119%" y="239.50">libftd2xx::FtdiCommon::read_all</text></g><g><title>libftd2xx::FtdiCommon::read (30 samples, 28.57%)</title><rect x="44.7619%" y="213" width="28.5714%" height="15" fill="rgb(251,115,12)" fg:x="47" fg:w="30"/><text x="45.0119%" y="223.50">libftd2xx::FtdiCommon::read</text></g><g><title>FT_Read (30 samples, 28.57%)</title><rect x="44.7619%" y="197" width="28.5714%" height="15" fill="rgb(240,54,50)" fg:x="47" fg:w="30"/><text x="45.0119%" y="207.50">FT_Read</text></g><g><title>usleep (24 samples, 22.86%)</title><rect x="50.4762%" y="181" width="22.8571%" height="15" fill="rgb(233,84,52)" fg:x="53" fg:w="24"/><text x="50.7262%" y="191.50">usleep</text></g><g><title>nanosleep (21 samples, 20.00%)</title><rect x="53.3333%" y="165" width="20.0000%" height="15" fill="rgb(207,117,47)" fg:x="56" fg:w="21"/><text x="53.5833%" y="175.50">nanosleep</text></g><g><title>clock_nanosleep@@GLIBC_2.17 (20 samples, 19.05%)</title><rect x="54.2857%" y="149" width="19.0476%" height="15" fill="rgb(249,43,39)" fg:x="57" fg:w="20"/><text x="54.5357%" y="159.50">clock_nanosleep@@GLIBC_2.17</text></g><g><title>__GI___pthread_disable_asynccancel (1 samples, 0.95%)</title><rect x="72.3810%" y="133" width="0.9524%" height="15" fill="rgb(209,38,44)" fg:x="76" fg:w="1"/><text x="72.6310%" y="143.50"></text></g><g><title>libusb_submit_transfer (5 samples, 4.76%)</title><rect x="73.3333%" y="133" width="4.7619%" height="15" fill="rgb(236,212,23)" fg:x="77" fg:w="5"/><text x="73.5833%" y="143.50">libusb..</text></g><g><title>op_submit_transfer (5 samples, 4.76%)</title><rect x="73.3333%" y="117" width="4.7619%" height="15" fill="rgb(242,79,21)" fg:x="77" fg:w="5"/><text x="73.5833%" y="127.50">op_sub..</text></g><g><title>submit_bulk_transfer (5 samples, 4.76%)</title><rect x="73.3333%" y="101" width="4.7619%" height="15" fill="rgb(211,96,35)" fg:x="77" fg:w="5"/><text x="73.5833%" y="111.50">submit..</text></g><g><title>__ioctl (5 samples, 4.76%)</title><rect x="73.3333%" y="85" width="4.7619%" height="15" fill="rgb(253,215,40)" fg:x="77" fg:w="5"/><text x="73.5833%" y="95.50">__ioctl</text></g><g><title>FT_WriteSingleThread (9 samples, 8.57%)</title><rect x="73.3333%" y="181" width="8.5714%" height="15" fill="rgb(211,81,21)" fg:x="77" fg:w="9"/><text x="73.5833%" y="191.50">FT_WriteSing..</text></g><g><title>libusb_bulk_transfer (9 samples, 8.57%)</title><rect x="73.3333%" y="165" width="8.5714%" height="15" fill="rgb(208,190,38)" fg:x="77" fg:w="9"/><text x="73.5833%" y="175.50">libusb_bulk_..</text></g><g><title>do_sync_bulk_transfer (9 samples, 8.57%)</title><rect x="73.3333%" y="149" width="8.5714%" height="15" fill="rgb(235,213,38)" fg:x="77" fg:w="9"/><text x="73.5833%" y="159.50">do_sync_bulk..</text></g><g><title>sync_transfer_wait_for_completion (4 samples, 3.81%)</title><rect x="78.0952%" y="133" width="3.8095%" height="15" fill="rgb(237,122,38)" fg:x="82" fg:w="4"/><text x="78.3452%" y="143.50">sync..</text></g><g><title>libusb_handle_events_completed (4 samples, 3.81%)</title><rect x="78.0952%" y="117" width="3.8095%" height="15" fill="rgb(244,218,35)" fg:x="82" fg:w="4"/><text x="78.3452%" y="127.50">libu..</text></g><g><title>libusb_handle_events_timeout_completed (4 samples, 3.81%)</title><rect x="78.0952%" y="101" width="3.8095%" height="15" fill="rgb(240,68,47)" fg:x="82" fg:w="4"/><text x="78.3452%" y="111.50">libu..</text></g><g><title>libusb_wait_for_event (4 samples, 3.81%)</title><rect x="78.0952%" y="85" width="3.8095%" height="15" fill="rgb(210,16,53)" fg:x="82" fg:w="4"/><text x="78.3452%" y="95.50">libu..</text></g><g><title>usbi_cond_timedwait (4 samples, 3.81%)</title><rect x="78.0952%" y="69" width="3.8095%" height="15" fill="rgb(235,124,12)" fg:x="82" fg:w="4"/><text x="78.3452%" y="79.50">usbi..</text></g><g><title>__GI___pthread_cond_timedwait (4 samples, 3.81%)</title><rect x="78.0952%" y="53" width="3.8095%" height="15" fill="rgb(224,169,11)" fg:x="82" fg:w="4"/><text x="78.3452%" y="63.50">__GI..</text></g><g><title>__futex_abstimed_wait_common (4 samples, 3.81%)</title><rect x="78.0952%" y="37" width="3.8095%" height="15" fill="rgb(250,166,2)" fg:x="82" fg:w="4"/><text x="78.3452%" y="47.50">__fu..</text></g><g><title>ads1x1x::devices::common::&lt;impl ads1x1x::types::Ads1x1x&lt;I2C,IC,CONV,MODE&gt;&gt;::is_measurement_in_progress (43 samples, 40.95%)</title><rect x="44.7619%" y="325" width="40.9524%" height="15" fill="rgb(242,216,29)" fg:x="47" fg:w="43"/><text x="45.0119%" y="335.50">ads1x1x::devices::common::&lt;impl ads1x1x::types::Ads1x1x&lt;I2C,IC,CONV..</text></g><g><title>ads1x1x::devices::common::&lt;impl ads1x1x::types::Ads1x1x&lt;I2C,IC,CONV,MODE&gt;&gt;::read_register (43 samples, 40.95%)</title><rect x="44.7619%" y="309" width="40.9524%" height="15" fill="rgb(230,116,27)" fg:x="47" fg:w="43"/><text x="45.0119%" y="319.50">ads1x1x::devices::common::&lt;impl ads1x1x::types::Ads1x1x&lt;I2C,IC,CONV..</text></g><g><title>embedded_hal::i2c::I2c::write_read (43 samples, 40.95%)</title><rect x="44.7619%" y="293" width="40.9524%" height="15" fill="rgb(228,99,48)" fg:x="47" fg:w="43"/><text x="45.0119%" y="303.50">embedded_hal::i2c::I2c::write_read</text></g><g><title>&lt;ftdi_embedded_hal::i2c::I2c&lt;Device&gt; as embedded_hal::i2c::I2c&gt;::transaction (43 samples, 40.95%)</title><rect x="44.7619%" y="277" width="40.9524%" height="15" fill="rgb(253,11,6)" fg:x="47" fg:w="43"/><text x="45.0119%" y="287.50">&lt;ftdi_embedded_hal::i2c::I2c&lt;Device&gt; as embedded_hal::i2c::I2c&gt;::tr..</text></g><g><title>ftdi_embedded_hal::i2c::I2c&lt;Device&gt;::transaction (43 samples, 40.95%)</title><rect x="44.7619%" y="261" width="40.9524%" height="15" fill="rgb(247,143,39)" fg:x="47" fg:w="43"/><text x="45.0119%" y="271.50">ftdi_embedded_hal::i2c::I2c&lt;Device&gt;::transaction</text></g><g><title>&lt;libftd2xx::Ft232h as ftdi_mpsse::MpsseCmdExecutor&gt;::send (13 samples, 12.38%)</title><rect x="73.3333%" y="245" width="12.3810%" height="15" fill="rgb(236,97,10)" fg:x="77" fg:w="13"/><text x="73.5833%" y="255.50">&lt;libftd2xx::Ft232h..</text></g><g><title>libftd2xx::FtdiCommon::write_all (13 samples, 12.38%)</title><rect x="73.3333%" y="229" width="12.3810%" height="15" fill="rgb(233,208,19)" fg:x="77" fg:w="13"/><text x="73.5833%" y="239.50">libftd2xx::FtdiCom..</text></g><g><title>libftd2xx::FtdiCommon::write (13 samples, 12.38%)</title><rect x="73.3333%" y="213" width="12.3810%" height="15" fill="rgb(216,164,2)" fg:x="77" fg:w="13"/><text x="73.5833%" y="223.50">libftd2xx::FtdiCom..</text></g><g><title>FT_Write (13 samples, 12.38%)</title><rect x="73.3333%" y="197" width="12.3810%" height="15" fill="rgb(220,129,5)" fg:x="77" fg:w="13"/><text x="73.5833%" y="207.50">FT_Write</text></g><g><title>usleep (4 samples, 3.81%)</title><rect x="81.9048%" y="181" width="3.8095%" height="15" fill="rgb(242,17,10)" fg:x="86" fg:w="4"/><text x="82.1548%" y="191.50">usle..</text></g><g><title>nanosleep (4 samples, 3.81%)</title><rect x="81.9048%" y="165" width="3.8095%" height="15" fill="rgb(242,107,0)" fg:x="86" fg:w="4"/><text x="82.1548%" y="175.50">nano..</text></g><g><title>clock_nanosleep@@GLIBC_2.17 (4 samples, 3.81%)</title><rect x="81.9048%" y="149" width="3.8095%" height="15" fill="rgb(251,28,31)" fg:x="86" fg:w="4"/><text x="82.1548%" y="159.50">cloc..</text></g><g><title>&lt;libftd2xx::Ft232h as ftdi_mpsse::MpsseCmdExecutor&gt;::recv (4 samples, 3.81%)</title><rect x="85.7143%" y="261" width="3.8095%" height="15" fill="rgb(233,223,10)" fg:x="90" fg:w="4"/><text x="85.9643%" y="271.50">&lt;lib..</text></g><g><title>libftd2xx::FtdiCommon::read_all (4 samples, 3.81%)</title><rect x="85.7143%" y="245" width="3.8095%" height="15" fill="rgb(215,21,27)" fg:x="90" fg:w="4"/><text x="85.9643%" y="255.50">libf..</text></g><g><title>libftd2xx::FtdiCommon::read (4 samples, 3.81%)</title><rect x="85.7143%" y="229" width="3.8095%" height="15" fill="rgb(232,23,21)" fg:x="90" fg:w="4"/><text x="85.9643%" y="239.50">libf..</text></g><g><title>FT_Read (4 samples, 3.81%)</title><rect x="85.7143%" y="213" width="3.8095%" height="15" fill="rgb(244,5,23)" fg:x="90" fg:w="4"/><text x="85.9643%" y="223.50">FT_R..</text></g><g><title>usleep (4 samples, 3.81%)</title><rect x="85.7143%" y="197" width="3.8095%" height="15" fill="rgb(226,81,46)" fg:x="90" fg:w="4"/><text x="85.9643%" y="207.50">usle..</text></g><g><title>nanosleep (4 samples, 3.81%)</title><rect x="85.7143%" y="181" width="3.8095%" height="15" fill="rgb(247,70,30)" fg:x="90" fg:w="4"/><text x="85.9643%" y="191.50">nano..</text></g><g><title>clock_nanosleep@@GLIBC_2.17 (2 samples, 1.90%)</title><rect x="87.6190%" y="165" width="1.9048%" height="15" fill="rgb(212,68,19)" fg:x="92" fg:w="2"/><text x="87.8690%" y="175.50">c..</text></g><g><title>__GI___pthread_disable_asynccancel (2 samples, 1.90%)</title><rect x="87.6190%" y="149" width="1.9048%" height="15" fill="rgb(240,187,13)" fg:x="92" fg:w="2"/><text x="87.8690%" y="159.50">_..</text></g><g><title>libusb_submit_transfer (1 samples, 0.95%)</title><rect x="89.5238%" y="149" width="0.9524%" height="15" fill="rgb(223,113,26)" fg:x="94" fg:w="1"/><text x="89.7738%" y="159.50"></text></g><g><title>op_submit_transfer (1 samples, 0.95%)</title><rect x="89.5238%" y="133" width="0.9524%" height="15" fill="rgb(206,192,2)" fg:x="94" fg:w="1"/><text x="89.7738%" y="143.50"></text></g><g><title>submit_bulk_transfer (1 samples, 0.95%)</title><rect x="89.5238%" y="117" width="0.9524%" height="15" fill="rgb(241,108,4)" fg:x="94" fg:w="1"/><text x="89.7738%" y="127.50"></text></g><g><title>__ioctl (1 samples, 0.95%)</title><rect x="89.5238%" y="101" width="0.9524%" height="15" fill="rgb(247,173,49)" fg:x="94" fg:w="1"/><text x="89.7738%" y="111.50"></text></g><g><title>&lt;libftd2xx::Ft232h as ftdi_mpsse::MpsseCmdExecutor&gt;::send (2 samples, 1.90%)</title><rect x="89.5238%" y="261" width="1.9048%" height="15" fill="rgb(224,114,35)" fg:x="94" fg:w="2"/><text x="89.7738%" y="271.50">&lt;..</text></g><g><title>libftd2xx::FtdiCommon::write_all (2 samples, 1.90%)</title><rect x="89.5238%" y="245" width="1.9048%" height="15" fill="rgb(245,159,27)" fg:x="94" fg:w="2"/><text x="89.7738%" y="255.50">l..</text></g><g><title>libftd2xx::FtdiCommon::write (2 samples, 1.90%)</title><rect x="89.5238%" y="229" width="1.9048%" height="15" fill="rgb(245,172,44)" fg:x="94" fg:w="2"/><text x="89.7738%" y="239.50">l..</text></g><g><title>FT_Write (2 samples, 1.90%)</title><rect x="89.5238%" y="213" width="1.9048%" height="15" fill="rgb(236,23,11)" fg:x="94" fg:w="2"/><text x="89.7738%" y="223.50">F..</text></g><g><title>FT_WriteSingleThread (2 samples, 1.90%)</title><rect x="89.5238%" y="197" width="1.9048%" height="15" fill="rgb(205,117,38)" fg:x="94" fg:w="2"/><text x="89.7738%" y="207.50">F..</text></g><g><title>libusb_bulk_transfer (2 samples, 1.90%)</title><rect x="89.5238%" y="181" width="1.9048%" height="15" fill="rgb(237,72,25)" fg:x="94" fg:w="2"/><text x="89.7738%" y="191.50">l..</text></g><g><title>do_sync_bulk_transfer (2 samples, 1.90%)</title><rect x="89.5238%" y="165" width="1.9048%" height="15" fill="rgb(244,70,9)" fg:x="94" fg:w="2"/><text x="89.7738%" y="175.50">d..</text></g><g><title>sync_transfer_wait_for_completion (1 samples, 0.95%)</title><rect x="90.4762%" y="149" width="0.9524%" height="15" fill="rgb(217,125,39)" fg:x="95" fg:w="1"/><text x="90.7262%" y="159.50"></text></g><g><title>libusb_handle_events_completed (1 samples, 0.95%)</title><rect x="90.4762%" y="133" width="0.9524%" height="15" fill="rgb(235,36,10)" fg:x="95" fg:w="1"/><text x="90.7262%" y="143.50"></text></g><g><title>libusb_handle_events_timeout_completed (1 samples, 0.95%)</title><rect x="90.4762%" y="117" width="0.9524%" height="15" fill="rgb(251,123,47)" fg:x="95" fg:w="1"/><text x="90.7262%" y="127.50"></text></g><g><title>libusb_wait_for_event (1 samples, 0.95%)</title><rect x="90.4762%" y="101" width="0.9524%" height="15" fill="rgb(221,13,13)" fg:x="95" fg:w="1"/><text x="90.7262%" y="111.50"></text></g><g><title>usbi_cond_timedwait (1 samples, 0.95%)</title><rect x="90.4762%" y="85" width="0.9524%" height="15" fill="rgb(238,131,9)" fg:x="95" fg:w="1"/><text x="90.7262%" y="95.50"></text></g><g><title>__GI___pthread_cond_timedwait (1 samples, 0.95%)</title><rect x="90.4762%" y="69" width="0.9524%" height="15" fill="rgb(211,50,8)" fg:x="95" fg:w="1"/><text x="90.7262%" y="79.50"></text></g><g><title>__condvar_dec_grefs (1 samples, 0.95%)</title><rect x="90.4762%" y="53" width="0.9524%" height="15" fill="rgb(245,182,24)" fg:x="95" fg:w="1"/><text x="90.7262%" y="63.50"></text></g><g><title>ads1x1x::devices::common::&lt;impl ads1x1x::types::Ads1x1x&lt;I2C,IC,CONV,MODE&gt;&gt;::read_register (7 samples, 6.67%)</title><rect x="85.7143%" y="325" width="6.6667%" height="15" fill="rgb(242,14,37)" fg:x="90" fg:w="7"/><text x="85.9643%" y="335.50">ads1x1x::..</text></g><g><title>embedded_hal::i2c::I2c::write_read (7 samples, 6.67%)</title><rect x="85.7143%" y="309" width="6.6667%" height="15" fill="rgb(246,228,12)" fg:x="90" fg:w="7"/><text x="85.9643%" y="319.50">embedded_..</text></g><g><title>&lt;ftdi_embedded_hal::i2c::I2c&lt;Device&gt; as embedded_hal::i2c::I2c&gt;::transaction (7 samples, 6.67%)</title><rect x="85.7143%" y="293" width="6.6667%" height="15" fill="rgb(213,55,15)" fg:x="90" fg:w="7"/><text x="85.9643%" y="303.50">&lt;ftdi_emb..</text></g><g><title>ftdi_embedded_hal::i2c::I2c&lt;Device&gt;::transaction (7 samples, 6.67%)</title><rect x="85.7143%" y="277" width="6.6667%" height="15" fill="rgb(209,9,3)" fg:x="90" fg:w="7"/><text x="85.9643%" y="287.50">ftdi_embe..</text></g><g><title>ftdi_mpsse::MpsseCmdBuilder::set_gpio_lower (1 samples, 0.95%)</title><rect x="91.4286%" y="261" width="0.9524%" height="15" fill="rgb(230,59,30)" fg:x="96" fg:w="1"/><text x="91.6786%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.95%)</title><rect x="91.4286%" y="245" width="0.9524%" height="15" fill="rgb(209,121,21)" fg:x="96" fg:w="1"/><text x="91.6786%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.95%)</title><rect x="91.4286%" y="229" width="0.9524%" height="15" fill="rgb(220,109,13)" fg:x="96" fg:w="1"/><text x="91.6786%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.95%)</title><rect x="91.4286%" y="213" width="0.9524%" height="15" fill="rgb(232,18,1)" fg:x="96" fg:w="1"/><text x="91.6786%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.95%)</title><rect x="91.4286%" y="197" width="0.9524%" height="15" fill="rgb(215,41,42)" fg:x="96" fg:w="1"/><text x="91.6786%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.95%)</title><rect x="91.4286%" y="181" width="0.9524%" height="15" fill="rgb(224,123,36)" fg:x="96" fg:w="1"/><text x="91.6786%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1 samples, 0.95%)</title><rect x="91.4286%" y="165" width="0.9524%" height="15" fill="rgb(240,125,3)" fg:x="96" fg:w="1"/><text x="91.6786%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.95%)</title><rect x="91.4286%" y="149" width="0.9524%" height="15" fill="rgb(205,98,50)" fg:x="96" fg:w="1"/><text x="91.6786%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.95%)</title><rect x="91.4286%" y="133" width="0.9524%" height="15" fill="rgb(205,185,37)" fg:x="96" fg:w="1"/><text x="91.6786%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.95%)</title><rect x="91.4286%" y="117" width="0.9524%" height="15" fill="rgb(238,207,15)" fg:x="96" fg:w="1"/><text x="91.6786%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.95%)</title><rect x="91.4286%" y="101" width="0.9524%" height="15" fill="rgb(213,199,42)" fg:x="96" fg:w="1"/><text x="91.6786%" y="111.50"></text></g><g><title>&lt;lus_positioning_control::zaber::TrackingBackend&lt;T,U&gt; as lus_positioning_control::control::Backend&gt;::get_target (54 samples, 51.43%)</title><rect x="44.7619%" y="373" width="51.4286%" height="15" fill="rgb(235,201,11)" fg:x="47" fg:w="54"/><text x="45.0119%" y="383.50">&lt;lus_positioning_control::zaber::TrackingBackend&lt;T,U&gt; as lus_positioning_control::con..</text></g><g><title>lus_positioning_control::control::read_voltage (54 samples, 51.43%)</title><rect x="44.7619%" y="357" width="51.4286%" height="15" fill="rgb(207,46,11)" fg:x="47" fg:w="54"/><text x="45.0119%" y="367.50">lus_positioning_control::control::read_voltage</text></g><g><title>ads1x1x::devices::mode::oneshot::&lt;impl ads1x1x::types::Ads1x1x&lt;I2C,IC,CONV,ads1x1x::types::mode::OneShot&gt;&gt;::read (54 samples, 51.43%)</title><rect x="44.7619%" y="341" width="51.4286%" height="15" fill="rgb(241,35,35)" fg:x="47" fg:w="54"/><text x="45.0119%" y="351.50">ads1x1x::devices::mode::oneshot::&lt;impl ads1x1x::types::Ads1x1x&lt;I2C,IC,CONV,ads1x1x::t..</text></g><g><title>ads1x1x::devices::mode::oneshot::&lt;impl ads1x1x::types::Ads1x1x&lt;I2C,IC,CONV,ads1x1x::types::mode::OneShot&gt;&gt;::trigger_measurement (4 samples, 3.81%)</title><rect x="92.3810%" y="325" width="3.8095%" height="15" fill="rgb(243,32,47)" fg:x="97" fg:w="4"/><text x="92.6310%" y="335.50">ads1..</text></g><g><title>ads1x1x::devices::common::&lt;impl ads1x1x::types::Ads1x1x&lt;I2C,IC,CONV,MODE&gt;&gt;::write_register (4 samples, 3.81%)</title><rect x="92.3810%" y="309" width="3.8095%" height="15" fill="rgb(247,202,23)" fg:x="97" fg:w="4"/><text x="92.6310%" y="319.50">ads1..</text></g><g><title>embedded_hal::i2c::I2c::write (4 samples, 3.81%)</title><rect x="92.3810%" y="293" width="3.8095%" height="15" fill="rgb(219,102,11)" fg:x="97" fg:w="4"/><text x="92.6310%" y="303.50">embe..</text></g><g><title>&lt;ftdi_embedded_hal::i2c::I2c&lt;Device&gt; as embedded_hal::i2c::I2c&gt;::transaction (4 samples, 3.81%)</title><rect x="92.3810%" y="277" width="3.8095%" height="15" fill="rgb(243,110,44)" fg:x="97" fg:w="4"/><text x="92.6310%" y="287.50">&lt;ftd..</text></g><g><title>ftdi_embedded_hal::i2c::I2c&lt;Device&gt;::transaction (4 samples, 3.81%)</title><rect x="92.3810%" y="261" width="3.8095%" height="15" fill="rgb(222,74,54)" fg:x="97" fg:w="4"/><text x="92.6310%" y="271.50">ftdi..</text></g><g><title>&lt;libftd2xx::Ft232h as ftdi_mpsse::MpsseCmdExecutor&gt;::send (4 samples, 3.81%)</title><rect x="92.3810%" y="245" width="3.8095%" height="15" fill="rgb(216,99,12)" fg:x="97" fg:w="4"/><text x="92.6310%" y="255.50">&lt;lib..</text></g><g><title>libftd2xx::FtdiCommon::write_all (4 samples, 3.81%)</title><rect x="92.3810%" y="229" width="3.8095%" height="15" fill="rgb(226,22,26)" fg:x="97" fg:w="4"/><text x="92.6310%" y="239.50">libf..</text></g><g><title>libftd2xx::FtdiCommon::write (4 samples, 3.81%)</title><rect x="92.3810%" y="213" width="3.8095%" height="15" fill="rgb(217,163,10)" fg:x="97" fg:w="4"/><text x="92.6310%" y="223.50">libf..</text></g><g><title>FT_Write (4 samples, 3.81%)</title><rect x="92.3810%" y="197" width="3.8095%" height="15" fill="rgb(213,25,53)" fg:x="97" fg:w="4"/><text x="92.6310%" y="207.50">FT_W..</text></g><g><title>FT_WriteSingleThread (4 samples, 3.81%)</title><rect x="92.3810%" y="181" width="3.8095%" height="15" fill="rgb(252,105,26)" fg:x="97" fg:w="4"/><text x="92.6310%" y="191.50">FT_W..</text></g><g><title>libusb_bulk_transfer (4 samples, 3.81%)</title><rect x="92.3810%" y="165" width="3.8095%" height="15" fill="rgb(220,39,43)" fg:x="97" fg:w="4"/><text x="92.6310%" y="175.50">libu..</text></g><g><title>do_sync_bulk_transfer (4 samples, 3.81%)</title><rect x="92.3810%" y="149" width="3.8095%" height="15" fill="rgb(229,68,48)" fg:x="97" fg:w="4"/><text x="92.6310%" y="159.50">do_s..</text></g><g><title>sync_transfer_wait_for_completion (4 samples, 3.81%)</title><rect x="92.3810%" y="133" width="3.8095%" height="15" fill="rgb(252,8,32)" fg:x="97" fg:w="4"/><text x="92.6310%" y="143.50">sync..</text></g><g><title>libusb_handle_events_completed (4 samples, 3.81%)</title><rect x="92.3810%" y="117" width="3.8095%" height="15" fill="rgb(223,20,43)" fg:x="97" fg:w="4"/><text x="92.6310%" y="127.50">libu..</text></g><g><title>libusb_handle_events_timeout_completed (4 samples, 3.81%)</title><rect x="92.3810%" y="101" width="3.8095%" height="15" fill="rgb(229,81,49)" fg:x="97" fg:w="4"/><text x="92.6310%" y="111.50">libu..</text></g><g><title>libusb_wait_for_event (4 samples, 3.81%)</title><rect x="92.3810%" y="85" width="3.8095%" height="15" fill="rgb(236,28,36)" fg:x="97" fg:w="4"/><text x="92.6310%" y="95.50">libu..</text></g><g><title>usbi_cond_timedwait (4 samples, 3.81%)</title><rect x="92.3810%" y="69" width="3.8095%" height="15" fill="rgb(249,185,26)" fg:x="97" fg:w="4"/><text x="92.6310%" y="79.50">usbi..</text></g><g><title>__GI___pthread_cond_timedwait (4 samples, 3.81%)</title><rect x="92.3810%" y="53" width="3.8095%" height="15" fill="rgb(249,174,33)" fg:x="97" fg:w="4"/><text x="92.6310%" y="63.50">__GI..</text></g><g><title>__futex_abstimed_wait_common (4 samples, 3.81%)</title><rect x="92.3810%" y="37" width="3.8095%" height="15" fill="rgb(233,201,37)" fg:x="97" fg:w="4"/><text x="92.6310%" y="47.50">__fu..</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (60 samples, 57.14%)</title><rect x="40.0000%" y="645" width="57.1429%" height="15" fill="rgb(221,78,26)" fg:x="42" fg:w="60"/><text x="40.2500%" y="655.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench</text></g><g><title>core::iter::traits::iterator::Iterator::collect (60 samples, 57.14%)</title><rect x="40.0000%" y="629" width="57.1429%" height="15" fill="rgb(250,127,30)" fg:x="42" fg:w="60"/><text x="40.2500%" y="639.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (60 samples, 57.14%)</title><rect x="40.0000%" y="613" width="57.1429%" height="15" fill="rgb(230,49,44)" fg:x="42" fg:w="60"/><text x="40.2500%" y="623.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (60 samples, 57.14%)</title><rect x="40.0000%" y="597" width="57.1429%" height="15" fill="rgb(229,67,23)" fg:x="42" fg:w="60"/><text x="40.2500%" y="607.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (60 samples, 57.14%)</title><rect x="40.0000%" y="581" width="57.1429%" height="15" fill="rgb(249,83,47)" fg:x="42" fg:w="60"/><text x="40.2500%" y="591.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (60 samples, 57.14%)</title><rect x="40.0000%" y="565" width="57.1429%" height="15" fill="rgb(215,43,3)" fg:x="42" fg:w="60"/><text x="40.2500%" y="575.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (60 samples, 57.14%)</title><rect x="40.0000%" y="549" width="57.1429%" height="15" fill="rgb(238,154,13)" fg:x="42" fg:w="60"/><text x="40.2500%" y="559.50">alloc::vec::Vec&lt;T,A&gt;::extend_trusted</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (60 samples, 57.14%)</title><rect x="40.0000%" y="533" width="57.1429%" height="15" fill="rgb(219,56,2)" fg:x="42" fg:w="60"/><text x="40.2500%" y="543.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (60 samples, 57.14%)</title><rect x="40.0000%" y="517" width="57.1429%" height="15" fill="rgb(233,0,4)" fg:x="42" fg:w="60"/><text x="40.2500%" y="527.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (60 samples, 57.14%)</title><rect x="40.0000%" y="501" width="57.1429%" height="15" fill="rgb(235,30,7)" fg:x="42" fg:w="60"/><text x="40.2500%" y="511.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (60 samples, 57.14%)</title><rect x="40.0000%" y="485" width="57.1429%" height="15" fill="rgb(250,79,13)" fg:x="42" fg:w="60"/><text x="40.2500%" y="495.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::{{closure}} (60 samples, 57.14%)</title><rect x="40.0000%" y="469" width="57.1429%" height="15" fill="rgb(211,146,34)" fg:x="42" fg:w="60"/><text x="40.2500%" y="479.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::{{closure}}</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (60 samples, 57.14%)</title><rect x="40.0000%" y="453" width="57.1429%" height="15" fill="rgb(228,22,38)" fg:x="42" fg:w="60"/><text x="40.2500%" y="463.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}}</text></g><g><title>control::criterion_benchmark::{{closure}} (60 samples, 57.14%)</title><rect x="40.0000%" y="437" width="57.1429%" height="15" fill="rgb(235,168,5)" fg:x="42" fg:w="60"/><text x="40.2500%" y="447.50">control::criterion_benchmark::{{closure}}</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (60 samples, 57.14%)</title><rect x="40.0000%" y="421" width="57.1429%" height="15" fill="rgb(221,155,16)" fg:x="42" fg:w="60"/><text x="40.2500%" y="431.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>control::criterion_benchmark::{{closure}}::{{closure}} (60 samples, 57.14%)</title><rect x="40.0000%" y="405" width="57.1429%" height="15" fill="rgb(215,215,53)" fg:x="42" fg:w="60"/><text x="40.2500%" y="415.50">control::criterion_benchmark::{{closure}}::{{closure}}</text></g><g><title>lus_positioning_control::control::compute_control (60 samples, 57.14%)</title><rect x="40.0000%" y="389" width="57.1429%" height="15" fill="rgb(223,4,10)" fg:x="42" fg:w="60"/><text x="40.2500%" y="399.50">lus_positioning_control::control::compute_control</text></g><g><title>&lt;lus_positioning_control::zaber::TrackingBackend&lt;T,U&gt; as lus_positioning_control::control::Backend&gt;::move_coax (1 samples, 0.95%)</title><rect x="96.1905%" y="373" width="0.9524%" height="15" fill="rgb(234,103,6)" fg:x="101" fg:w="1"/><text x="96.4405%" y="383.50"></text></g><g><title>lus_positioning_control::zaber::move_coax_zaber (1 samples, 0.95%)</title><rect x="96.1905%" y="357" width="0.9524%" height="15" fill="rgb(227,97,0)" fg:x="101" fg:w="1"/><text x="96.4405%" y="367.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::command_reply (1 samples, 0.95%)</title><rect x="96.1905%" y="341" width="0.9524%" height="15" fill="rgb(234,150,53)" fg:x="101" fg:w="1"/><text x="96.4405%" y="351.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::internal_command_reply (1 samples, 0.95%)</title><rect x="96.1905%" y="325" width="0.9524%" height="15" fill="rgb(228,201,54)" fg:x="101" fg:w="1"/><text x="96.4405%" y="335.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::receive_response (1 samples, 0.95%)</title><rect x="96.1905%" y="309" width="0.9524%" height="15" fill="rgb(222,22,37)" fg:x="101" fg:w="1"/><text x="96.4405%" y="319.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::receive_response::{{closure}} (1 samples, 0.95%)</title><rect x="96.1905%" y="293" width="0.9524%" height="15" fill="rgb(237,53,32)" fg:x="101" fg:w="1"/><text x="96.4405%" y="303.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::build_response (1 samples, 0.95%)</title><rect x="96.1905%" y="277" width="0.9524%" height="15" fill="rgb(233,25,53)" fg:x="101" fg:w="1"/><text x="96.4405%" y="287.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::response_packet (1 samples, 0.95%)</title><rect x="96.1905%" y="261" width="0.9524%" height="15" fill="rgb(210,40,34)" fg:x="101" fg:w="1"/><text x="96.4405%" y="271.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::read_packet_bytes (1 samples, 0.95%)</title><rect x="96.1905%" y="245" width="0.9524%" height="15" fill="rgb(241,220,44)" fg:x="101" fg:w="1"/><text x="96.4405%" y="255.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::read_packet_bytes::{{closure}} (1 samples, 0.95%)</title><rect x="96.1905%" y="229" width="0.9524%" height="15" fill="rgb(235,28,35)" fg:x="101" fg:w="1"/><text x="96.4405%" y="239.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.95%)</title><rect x="96.1905%" y="213" width="0.9524%" height="15" fill="rgb(210,56,17)" fg:x="101" fg:w="1"/><text x="96.4405%" y="223.50"></text></g><g><title>&lt;R as std::io::SpecReadByte&gt;::spec_read_byte (1 samples, 0.95%)</title><rect x="96.1905%" y="197" width="0.9524%" height="15" fill="rgb(224,130,29)" fg:x="101" fg:w="1"/><text x="96.4405%" y="207.50"></text></g><g><title>std::io::inlined_slow_read_byte (1 samples, 0.95%)</title><rect x="96.1905%" y="181" width="0.9524%" height="15" fill="rgb(235,212,8)" fg:x="101" fg:w="1"/><text x="96.4405%" y="191.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (1 samples, 0.95%)</title><rect x="96.1905%" y="165" width="0.9524%" height="15" fill="rgb(223,33,50)" fg:x="101" fg:w="1"/><text x="96.4405%" y="175.50"></text></g><g><title>&lt;serialport::posix::tty::TTYPort as std::io::Read&gt;::read (1 samples, 0.95%)</title><rect x="96.1905%" y="149" width="0.9524%" height="15" fill="rgb(219,149,13)" fg:x="101" fg:w="1"/><text x="96.4405%" y="159.50"></text></g><g><title>nix::unistd::read (1 samples, 0.95%)</title><rect x="96.1905%" y="133" width="0.9524%" height="15" fill="rgb(250,156,29)" fg:x="101" fg:w="1"/><text x="96.4405%" y="143.50"></text></g><g><title>__GI___read (1 samples, 0.95%)</title><rect x="96.1905%" y="117" width="0.9524%" height="15" fill="rgb(216,193,19)" fg:x="101" fg:w="1"/><text x="96.4405%" y="127.50"></text></g><g><title>&lt;lus_positioning_control::zaber::TrackingBackend&lt;T,U&gt; as lus_positioning_control::control::Backend&gt;::get_pos (1 samples, 0.95%)</title><rect x="97.1429%" y="549" width="0.9524%" height="15" fill="rgb(216,135,14)" fg:x="102" fg:w="1"/><text x="97.3929%" y="559.50"></text></g><g><title>lus_positioning_control::zaber::get_pos_zaber (1 samples, 0.95%)</title><rect x="97.1429%" y="533" width="0.9524%" height="15" fill="rgb(241,47,5)" fg:x="102" fg:w="1"/><text x="97.3929%" y="543.50"></text></g><g><title>&lt;zproto::ascii::port::iter::NResponses&lt;B,R,Tag,H&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.95%)</title><rect x="97.1429%" y="517" width="0.9524%" height="15" fill="rgb(233,42,35)" fg:x="102" fg:w="1"/><text x="97.3929%" y="527.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::receive_response (1 samples, 0.95%)</title><rect x="97.1429%" y="501" width="0.9524%" height="15" fill="rgb(231,13,6)" fg:x="102" fg:w="1"/><text x="97.3929%" y="511.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::receive_response::{{closure}} (1 samples, 0.95%)</title><rect x="97.1429%" y="485" width="0.9524%" height="15" fill="rgb(207,181,40)" fg:x="102" fg:w="1"/><text x="97.3929%" y="495.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::build_response (1 samples, 0.95%)</title><rect x="97.1429%" y="469" width="0.9524%" height="15" fill="rgb(254,173,49)" fg:x="102" fg:w="1"/><text x="97.3929%" y="479.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::response_packet (1 samples, 0.95%)</title><rect x="97.1429%" y="453" width="0.9524%" height="15" fill="rgb(221,1,38)" fg:x="102" fg:w="1"/><text x="97.3929%" y="463.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::read_packet_bytes (1 samples, 0.95%)</title><rect x="97.1429%" y="437" width="0.9524%" height="15" fill="rgb(206,124,46)" fg:x="102" fg:w="1"/><text x="97.3929%" y="447.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::read_packet_bytes::{{closure}} (1 samples, 0.95%)</title><rect x="97.1429%" y="421" width="0.9524%" height="15" fill="rgb(249,21,11)" fg:x="102" fg:w="1"/><text x="97.3929%" y="431.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.95%)</title><rect x="97.1429%" y="405" width="0.9524%" height="15" fill="rgb(222,201,40)" fg:x="102" fg:w="1"/><text x="97.3929%" y="415.50"></text></g><g><title>&lt;R as std::io::SpecReadByte&gt;::spec_read_byte (1 samples, 0.95%)</title><rect x="97.1429%" y="389" width="0.9524%" height="15" fill="rgb(235,61,29)" fg:x="102" fg:w="1"/><text x="97.3929%" y="399.50"></text></g><g><title>std::io::inlined_slow_read_byte (1 samples, 0.95%)</title><rect x="97.1429%" y="373" width="0.9524%" height="15" fill="rgb(219,207,3)" fg:x="102" fg:w="1"/><text x="97.3929%" y="383.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (1 samples, 0.95%)</title><rect x="97.1429%" y="357" width="0.9524%" height="15" fill="rgb(222,56,46)" fg:x="102" fg:w="1"/><text x="97.3929%" y="367.50"></text></g><g><title>&lt;serialport::posix::tty::TTYPort as std::io::Read&gt;::read (1 samples, 0.95%)</title><rect x="97.1429%" y="341" width="0.9524%" height="15" fill="rgb(239,76,54)" fg:x="102" fg:w="1"/><text x="97.3929%" y="351.50"></text></g><g><title>serialport::posix::poll::wait_read_fd (1 samples, 0.95%)</title><rect x="97.1429%" y="325" width="0.9524%" height="15" fill="rgb(231,124,27)" fg:x="102" fg:w="1"/><text x="97.3929%" y="335.50"></text></g><g><title>serialport::posix::poll::wait_fd (1 samples, 0.95%)</title><rect x="97.1429%" y="309" width="0.9524%" height="15" fill="rgb(249,195,6)" fg:x="102" fg:w="1"/><text x="97.3929%" y="319.50"></text></g><g><title>serialport::posix::poll::poll_clamped (1 samples, 0.95%)</title><rect x="97.1429%" y="293" width="0.9524%" height="15" fill="rgb(237,174,47)" fg:x="102" fg:w="1"/><text x="97.3929%" y="303.50"></text></g><g><title>nix::poll::ppoll (1 samples, 0.95%)</title><rect x="97.1429%" y="277" width="0.9524%" height="15" fill="rgb(206,201,31)" fg:x="102" fg:w="1"/><text x="97.3929%" y="287.50"></text></g><g><title>ppoll (1 samples, 0.95%)</title><rect x="97.1429%" y="261" width="0.9524%" height="15" fill="rgb(231,57,52)" fg:x="102" fg:w="1"/><text x="97.3929%" y="271.50"></text></g><g><title>&lt;lus_positioning_control::zaber::TrackingBackend&lt;T,U&gt; as lus_positioning_control::control::Backend&gt;::get_target (1 samples, 0.95%)</title><rect x="98.0952%" y="549" width="0.9524%" height="15" fill="rgb(248,177,22)" fg:x="103" fg:w="1"/><text x="98.3452%" y="559.50"></text></g><g><title>lus_positioning_control::control::read_voltage (1 samples, 0.95%)</title><rect x="98.0952%" y="533" width="0.9524%" height="15" fill="rgb(215,211,37)" fg:x="103" fg:w="1"/><text x="98.3452%" y="543.50"></text></g><g><title>ads1x1x::devices::mode::oneshot::&lt;impl ads1x1x::types::Ads1x1x&lt;I2C,IC,CONV,ads1x1x::types::mode::OneShot&gt;&gt;::read (1 samples, 0.95%)</title><rect x="98.0952%" y="517" width="0.9524%" height="15" fill="rgb(241,128,51)" fg:x="103" fg:w="1"/><text x="98.3452%" y="527.50"></text></g><g><title>ads1x1x::devices::common::&lt;impl ads1x1x::types::Ads1x1x&lt;I2C,IC,CONV,MODE&gt;&gt;::is_measurement_in_progress (1 samples, 0.95%)</title><rect x="98.0952%" y="501" width="0.9524%" height="15" fill="rgb(227,165,31)" fg:x="103" fg:w="1"/><text x="98.3452%" y="511.50"></text></g><g><title>ads1x1x::devices::common::&lt;impl ads1x1x::types::Ads1x1x&lt;I2C,IC,CONV,MODE&gt;&gt;::read_register (1 samples, 0.95%)</title><rect x="98.0952%" y="485" width="0.9524%" height="15" fill="rgb(228,167,24)" fg:x="103" fg:w="1"/><text x="98.3452%" y="495.50"></text></g><g><title>embedded_hal::i2c::I2c::write_read (1 samples, 0.95%)</title><rect x="98.0952%" y="469" width="0.9524%" height="15" fill="rgb(228,143,12)" fg:x="103" fg:w="1"/><text x="98.3452%" y="479.50"></text></g><g><title>&lt;ftdi_embedded_hal::i2c::I2c&lt;Device&gt; as embedded_hal::i2c::I2c&gt;::transaction (1 samples, 0.95%)</title><rect x="98.0952%" y="453" width="0.9524%" height="15" fill="rgb(249,149,8)" fg:x="103" fg:w="1"/><text x="98.3452%" y="463.50"></text></g><g><title>ftdi_embedded_hal::i2c::I2c&lt;Device&gt;::transaction (1 samples, 0.95%)</title><rect x="98.0952%" y="437" width="0.9524%" height="15" fill="rgb(243,35,44)" fg:x="103" fg:w="1"/><text x="98.3452%" y="447.50"></text></g><g><title>&lt;libftd2xx::Ft232h as ftdi_mpsse::MpsseCmdExecutor&gt;::recv (1 samples, 0.95%)</title><rect x="98.0952%" y="421" width="0.9524%" height="15" fill="rgb(246,89,9)" fg:x="103" fg:w="1"/><text x="98.3452%" y="431.50"></text></g><g><title>libftd2xx::FtdiCommon::read_all (1 samples, 0.95%)</title><rect x="98.0952%" y="405" width="0.9524%" height="15" fill="rgb(233,213,13)" fg:x="103" fg:w="1"/><text x="98.3452%" y="415.50"></text></g><g><title>libftd2xx::FtdiCommon::read (1 samples, 0.95%)</title><rect x="98.0952%" y="389" width="0.9524%" height="15" fill="rgb(233,141,41)" fg:x="103" fg:w="1"/><text x="98.3452%" y="399.50"></text></g><g><title>FT_Read (1 samples, 0.95%)</title><rect x="98.0952%" y="373" width="0.9524%" height="15" fill="rgb(239,167,4)" fg:x="103" fg:w="1"/><text x="98.3452%" y="383.50"></text></g><g><title>usleep (1 samples, 0.95%)</title><rect x="98.0952%" y="357" width="0.9524%" height="15" fill="rgb(209,217,16)" fg:x="103" fg:w="1"/><text x="98.3452%" y="367.50"></text></g><g><title>nanosleep (1 samples, 0.95%)</title><rect x="98.0952%" y="341" width="0.9524%" height="15" fill="rgb(219,88,35)" fg:x="103" fg:w="1"/><text x="98.3452%" y="351.50"></text></g><g><title>clock_nanosleep@@GLIBC_2.17 (1 samples, 0.95%)</title><rect x="98.0952%" y="325" width="0.9524%" height="15" fill="rgb(220,193,23)" fg:x="103" fg:w="1"/><text x="98.3452%" y="335.50"></text></g><g><title>all (105 samples, 100%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(230,90,52)" fg:x="0" fg:w="105"/><text x="0.2500%" y="1055.50"></text></g><g><title>control-3172cdc (105 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(252,106,19)" fg:x="0" fg:w="105"/><text x="0.2500%" y="1039.50">control-3172cdc</text></g><g><title>_start (63 samples, 60.00%)</title><rect x="40.0000%" y="1013" width="60.0000%" height="15" fill="rgb(206,74,20)" fg:x="42" fg:w="63"/><text x="40.2500%" y="1023.50">_start</text></g><g><title>__libc_start_main_alias_2 (63 samples, 60.00%)</title><rect x="40.0000%" y="997" width="60.0000%" height="15" fill="rgb(230,138,44)" fg:x="42" fg:w="63"/><text x="40.2500%" y="1007.50">__libc_start_main_alias_2</text></g><g><title>__libc_start_call_main (63 samples, 60.00%)</title><rect x="40.0000%" y="981" width="60.0000%" height="15" fill="rgb(235,182,43)" fg:x="42" fg:w="63"/><text x="40.2500%" y="991.50">__libc_start_call_main</text></g><g><title>main (63 samples, 60.00%)</title><rect x="40.0000%" y="965" width="60.0000%" height="15" fill="rgb(242,16,51)" fg:x="42" fg:w="63"/><text x="40.2500%" y="975.50">main</text></g><g><title>std::rt::lang_start_internal (63 samples, 60.00%)</title><rect x="40.0000%" y="949" width="60.0000%" height="15" fill="rgb(248,9,4)" fg:x="42" fg:w="63"/><text x="40.2500%" y="959.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (63 samples, 60.00%)</title><rect x="40.0000%" y="933" width="60.0000%" height="15" fill="rgb(210,31,22)" fg:x="42" fg:w="63"/><text x="40.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (63 samples, 60.00%)</title><rect x="40.0000%" y="917" width="60.0000%" height="15" fill="rgb(239,54,39)" fg:x="42" fg:w="63"/><text x="40.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (63 samples, 60.00%)</title><rect x="40.0000%" y="901" width="60.0000%" height="15" fill="rgb(230,99,41)" fg:x="42" fg:w="63"/><text x="40.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (63 samples, 60.00%)</title><rect x="40.0000%" y="885" width="60.0000%" height="15" fill="rgb(253,106,12)" fg:x="42" fg:w="63"/><text x="40.2500%" y="895.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (63 samples, 60.00%)</title><rect x="40.0000%" y="869" width="60.0000%" height="15" fill="rgb(213,46,41)" fg:x="42" fg:w="63"/><text x="40.2500%" y="879.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (63 samples, 60.00%)</title><rect x="40.0000%" y="853" width="60.0000%" height="15" fill="rgb(215,133,35)" fg:x="42" fg:w="63"/><text x="40.2500%" y="863.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (63 samples, 60.00%)</title><rect x="40.0000%" y="837" width="60.0000%" height="15" fill="rgb(213,28,5)" fg:x="42" fg:w="63"/><text x="40.2500%" y="847.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (63 samples, 60.00%)</title><rect x="40.0000%" y="821" width="60.0000%" height="15" fill="rgb(215,77,49)" fg:x="42" fg:w="63"/><text x="40.2500%" y="831.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (63 samples, 60.00%)</title><rect x="40.0000%" y="805" width="60.0000%" height="15" fill="rgb(248,100,22)" fg:x="42" fg:w="63"/><text x="40.2500%" y="815.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (63 samples, 60.00%)</title><rect x="40.0000%" y="789" width="60.0000%" height="15" fill="rgb(208,67,9)" fg:x="42" fg:w="63"/><text x="40.2500%" y="799.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (63 samples, 60.00%)</title><rect x="40.0000%" y="773" width="60.0000%" height="15" fill="rgb(219,133,21)" fg:x="42" fg:w="63"/><text x="40.2500%" y="783.50">core::ops::function::FnOnce::call_once</text></g><g><title>control::main (63 samples, 60.00%)</title><rect x="40.0000%" y="757" width="60.0000%" height="15" fill="rgb(246,46,29)" fg:x="42" fg:w="63"/><text x="40.2500%" y="767.50">control::main</text></g><g><title>control::benches (63 samples, 60.00%)</title><rect x="40.0000%" y="741" width="60.0000%" height="15" fill="rgb(246,185,52)" fg:x="42" fg:w="63"/><text x="40.2500%" y="751.50">control::benches</text></g><g><title>control::criterion_benchmark (63 samples, 60.00%)</title><rect x="40.0000%" y="725" width="60.0000%" height="15" fill="rgb(252,136,11)" fg:x="42" fg:w="63"/><text x="40.2500%" y="735.50">control::criterion_benchmark</text></g><g><title>criterion::Criterion&lt;M&gt;::bench_function (63 samples, 60.00%)</title><rect x="40.0000%" y="709" width="60.0000%" height="15" fill="rgb(219,138,53)" fg:x="42" fg:w="63"/><text x="40.2500%" y="719.50">criterion::Criterion&lt;M&gt;::bench_function</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (63 samples, 60.00%)</title><rect x="40.0000%" y="693" width="60.0000%" height="15" fill="rgb(211,51,23)" fg:x="42" fg:w="63"/><text x="40.2500%" y="703.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (63 samples, 60.00%)</title><rect x="40.0000%" y="677" width="60.0000%" height="15" fill="rgb(247,221,28)" fg:x="42" fg:w="63"/><text x="40.2500%" y="687.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench</text></g><g><title>criterion::routine::Routine::profile (63 samples, 60.00%)</title><rect x="40.0000%" y="661" width="60.0000%" height="15" fill="rgb(251,222,45)" fg:x="42" fg:w="63"/><text x="40.2500%" y="671.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (3 samples, 2.86%)</title><rect x="97.1429%" y="645" width="2.8571%" height="15" fill="rgb(217,162,53)" fg:x="102" fg:w="3"/><text x="97.3929%" y="655.50">&lt;c..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (3 samples, 2.86%)</title><rect x="97.1429%" y="629" width="2.8571%" height="15" fill="rgb(229,93,14)" fg:x="102" fg:w="3"/><text x="97.3929%" y="639.50">cr..</text></g><g><title>control::criterion_benchmark::{{closure}} (3 samples, 2.86%)</title><rect x="97.1429%" y="613" width="2.8571%" height="15" fill="rgb(209,67,49)" fg:x="102" fg:w="3"/><text x="97.3929%" y="623.50">co..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (3 samples, 2.86%)</title><rect x="97.1429%" y="597" width="2.8571%" height="15" fill="rgb(213,87,29)" fg:x="102" fg:w="3"/><text x="97.3929%" y="607.50">cr..</text></g><g><title>control::criterion_benchmark::{{closure}}::{{closure}} (3 samples, 2.86%)</title><rect x="97.1429%" y="581" width="2.8571%" height="15" fill="rgb(205,151,52)" fg:x="102" fg:w="3"/><text x="97.3929%" y="591.50">co..</text></g><g><title>lus_positioning_control::control::compute_control (3 samples, 2.86%)</title><rect x="97.1429%" y="565" width="2.8571%" height="15" fill="rgb(253,215,39)" fg:x="102" fg:w="3"/><text x="97.3929%" y="575.50">lu..</text></g><g><title>&lt;lus_positioning_control::zaber::TrackingBackend&lt;T,U&gt; as lus_positioning_control::control::Backend&gt;::move_coax (1 samples, 0.95%)</title><rect x="99.0476%" y="549" width="0.9524%" height="15" fill="rgb(221,220,41)" fg:x="104" fg:w="1"/><text x="99.2976%" y="559.50"></text></g><g><title>lus_positioning_control::zaber::move_coax_zaber (1 samples, 0.95%)</title><rect x="99.0476%" y="533" width="0.9524%" height="15" fill="rgb(218,133,21)" fg:x="104" fg:w="1"/><text x="99.2976%" y="543.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::command_reply (1 samples, 0.95%)</title><rect x="99.0476%" y="517" width="0.9524%" height="15" fill="rgb(221,193,43)" fg:x="104" fg:w="1"/><text x="99.2976%" y="527.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::internal_command_reply (1 samples, 0.95%)</title><rect x="99.0476%" y="501" width="0.9524%" height="15" fill="rgb(240,128,52)" fg:x="104" fg:w="1"/><text x="99.2976%" y="511.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::receive_response (1 samples, 0.95%)</title><rect x="99.0476%" y="485" width="0.9524%" height="15" fill="rgb(253,114,12)" fg:x="104" fg:w="1"/><text x="99.2976%" y="495.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::receive_response::{{closure}} (1 samples, 0.95%)</title><rect x="99.0476%" y="469" width="0.9524%" height="15" fill="rgb(215,223,47)" fg:x="104" fg:w="1"/><text x="99.2976%" y="479.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::build_response (1 samples, 0.95%)</title><rect x="99.0476%" y="453" width="0.9524%" height="15" fill="rgb(248,225,23)" fg:x="104" fg:w="1"/><text x="99.2976%" y="463.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::response_packet (1 samples, 0.95%)</title><rect x="99.0476%" y="437" width="0.9524%" height="15" fill="rgb(250,108,0)" fg:x="104" fg:w="1"/><text x="99.2976%" y="447.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::read_packet_bytes (1 samples, 0.95%)</title><rect x="99.0476%" y="421" width="0.9524%" height="15" fill="rgb(228,208,7)" fg:x="104" fg:w="1"/><text x="99.2976%" y="431.50"></text></g><g><title>zproto::ascii::port::Port&lt;B,Tag,H&gt;::read_packet_bytes::{{closure}} (1 samples, 0.95%)</title><rect x="99.0476%" y="405" width="0.9524%" height="15" fill="rgb(244,45,10)" fg:x="104" fg:w="1"/><text x="99.2976%" y="415.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.95%)</title><rect x="99.0476%" y="389" width="0.9524%" height="15" fill="rgb(207,125,25)" fg:x="104" fg:w="1"/><text x="99.2976%" y="399.50"></text></g><g><title>&lt;R as std::io::SpecReadByte&gt;::spec_read_byte (1 samples, 0.95%)</title><rect x="99.0476%" y="373" width="0.9524%" height="15" fill="rgb(210,195,18)" fg:x="104" fg:w="1"/><text x="99.2976%" y="383.50"></text></g><g><title>std::io::inlined_slow_read_byte (1 samples, 0.95%)</title><rect x="99.0476%" y="357" width="0.9524%" height="15" fill="rgb(249,80,12)" fg:x="104" fg:w="1"/><text x="99.2976%" y="367.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (1 samples, 0.95%)</title><rect x="99.0476%" y="341" width="0.9524%" height="15" fill="rgb(221,65,9)" fg:x="104" fg:w="1"/><text x="99.2976%" y="351.50"></text></g><g><title>&lt;serialport::posix::tty::TTYPort as std::io::Read&gt;::read (1 samples, 0.95%)</title><rect x="99.0476%" y="325" width="0.9524%" height="15" fill="rgb(235,49,36)" fg:x="104" fg:w="1"/><text x="99.2976%" y="335.50"></text></g><g><title>serialport::posix::poll::wait_read_fd (1 samples, 0.95%)</title><rect x="99.0476%" y="309" width="0.9524%" height="15" fill="rgb(225,32,20)" fg:x="104" fg:w="1"/><text x="99.2976%" y="319.50"></text></g><g><title>serialport::posix::poll::wait_fd (1 samples, 0.95%)</title><rect x="99.0476%" y="293" width="0.9524%" height="15" fill="rgb(215,141,46)" fg:x="104" fg:w="1"/><text x="99.2976%" y="303.50"></text></g><g><title>serialport::posix::poll::poll_clamped (1 samples, 0.95%)</title><rect x="99.0476%" y="277" width="0.9524%" height="15" fill="rgb(250,160,47)" fg:x="104" fg:w="1"/><text x="99.2976%" y="287.50"></text></g><g><title>nix::poll::ppoll (1 samples, 0.95%)</title><rect x="99.0476%" y="261" width="0.9524%" height="15" fill="rgb(216,222,40)" fg:x="104" fg:w="1"/><text x="99.2976%" y="271.50"></text></g><g><title>ppoll (1 samples, 0.95%)</title><rect x="99.0476%" y="245" width="0.9524%" height="15" fill="rgb(234,217,39)" fg:x="104" fg:w="1"/><text x="99.2976%" y="255.50"></text></g></svg></svg>